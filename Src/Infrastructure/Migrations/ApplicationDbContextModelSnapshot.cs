// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TreniniDotNet.Infrastructure.Persistence;

namespace TreniniDotNet.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.Brands.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("brand_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .HasColumnName("company_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(true);

                    b.Property<string>("EmailAddress")
                        .HasColumnName("mail_address")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("GroupName")
                        .HasColumnName("group_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnName("kind")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnName("website_url")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("brands");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.CatalogItems.CatalogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("catalog_item_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnName("brand_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryDate")
                        .HasColumnName("delivery_date")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsAvailable")
                        .HasColumnName("available")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .HasColumnName("item_number")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ModelDescription")
                        .HasColumnName("model_description")
                        .HasColumnType("character varying(2500)")
                        .HasMaxLength(2500)
                        .IsUnicode(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PowerMethod")
                        .IsRequired()
                        .HasColumnName("power_method")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("PrototypeDescription")
                        .HasColumnName("prototype_description")
                        .HasColumnType("character varying(2500)")
                        .HasMaxLength(2500)
                        .IsUnicode(true);

                    b.Property<Guid>("ScaleId")
                        .HasColumnName("scale_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40)
                        .IsUnicode(true);

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ScaleId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("catalog_items");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.RollingStock", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("rolling_stock_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CatalogItemId")
                        .HasColumnName("catalog_item_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Couplers")
                        .HasColumnName("couplers")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Epoch")
                        .IsRequired()
                        .HasColumnName("epoch")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Livery")
                        .HasColumnName("livery")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<decimal?>("MinRadius")
                        .HasColumnName("min_radius")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RailwayId")
                        .HasColumnName("railway_id")
                        .HasColumnType("uuid");

                    b.Property<string>("rolling_stock_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CatalogItemId");

                    b.HasIndex("RailwayId");

                    b.ToTable("rolling_stocks");

                    b.HasDiscriminator<string>("rolling_stock_type").HasValue("RollingStock");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.Railways.Railway", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("railway_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .HasColumnName("company_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Headquarters")
                        .HasColumnName("headquarters")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnName("website_url")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("railways");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.Scales.Scale", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("scale_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<decimal>("Ratio")
                        .HasColumnName("ratio")
                        .HasColumnType("numeric");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.Property<int?>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("scales");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Collecting.Collections.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("collection_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnName("owner")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Owner");

                    b.ToTable("collections");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Collecting.Collections.CollectionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("collection_item_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnName("added_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CatalogItemId")
                        .HasColumnName("catalog_item_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CollectionId")
                        .HasColumnName("collection_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnName("condition")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<Guid?>("PurchasedAtId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnName("removed_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CatalogItemId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("PurchasedAtId");

                    b.ToTable("collection_items");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Collecting.Shops.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("shop_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("mail_address")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnName("website_url")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("shops");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Collecting.Wishlists.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("wishlist_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ListName")
                        .HasColumnName("wishlist_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnName("owner")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnName("visibility")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("Owner");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("wishlists");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Collecting.Wishlists.WishlistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("wishlist_item_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnName("added_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CatalogItemId")
                        .HasColumnName("catalog_item_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnName("priority")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnName("removed_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("WishlistId")
                        .HasColumnName("wishlist_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CatalogItemId");

                    b.HasIndex("WishlistId");

                    b.ToTable("wishlist_items");
                });

            modelBuilder.Entity("TreniniDotNet.Infrastructure.Persistence.Collecting.ShopFavourite", b =>
                {
                    b.Property<string>("Owner")
                        .HasColumnName("owner")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<Guid>("ShopId")
                        .HasColumnName("shop_id")
                        .HasColumnType("uuid");

                    b.HasKey("Owner", "ShopId");

                    b.HasIndex("ShopId");

                    b.ToTable("shop_favourites");
                });

            modelBuilder.Entity("TreniniDotNet.Infrastructure.Persistence.Images.Image", b =>
                {
                    b.Property<string>("Filename")
                        .HasColumnName("filename")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15)
                        .IsUnicode(true);

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("bytea");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnName("content_type")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.HasKey("Filename");

                    b.ToTable("images");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.FreightCar", b =>
                {
                    b.HasBaseType("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.RollingStock");

                    b.Property<string>("TypeName")
                        .HasColumnName("type_name")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15)
                        .IsUnicode(true);

                    b.HasDiscriminator().HasValue("FreightCar");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.Locomotive", b =>
                {
                    b.HasBaseType("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.RollingStock");

                    b.Property<string>("Control")
                        .IsRequired()
                        .HasColumnName("control")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DccInterface")
                        .IsRequired()
                        .HasColumnName("dcc_interface")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Depot")
                        .HasColumnName("depot")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.HasDiscriminator().HasValue("Locomotive");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.PassengerCar", b =>
                {
                    b.HasBaseType("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.RollingStock");

                    b.Property<string>("PassengerCarType")
                        .HasColumnName("passenger_car_type")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("ServiceLevel")
                        .HasColumnName("service_level")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("TypeName")
                        .HasColumnName("type_name")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15)
                        .IsUnicode(true);

                    b.HasDiscriminator().HasValue("PassengerCar");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.Train", b =>
                {
                    b.HasBaseType("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.RollingStock");

                    b.Property<string>("Control")
                        .IsRequired()
                        .HasColumnName("control")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DccInterface")
                        .IsRequired()
                        .HasColumnName("dcc_interface")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasDiscriminator().HasValue("Train");
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.Brands.Brand", b =>
                {
                    b.OwnsOne("TreniniDotNet.SharedKernel.Addresses.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BrandId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnName("address_city")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50)
                                .IsUnicode(true);

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnName("address_country")
                                .HasColumnType("character varying(2)")
                                .HasMaxLength(2);

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnName("address_line1")
                                .HasColumnType("character varying(255)")
                                .HasMaxLength(255)
                                .IsUnicode(true);

                            b1.Property<string>("Line2")
                                .HasColumnName("address_line2")
                                .HasColumnType("character varying(255)")
                                .HasMaxLength(255)
                                .IsUnicode(true);

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnName("address_postal_code")
                                .HasColumnType("character varying(10)")
                                .HasMaxLength(10);

                            b1.Property<string>("Region")
                                .HasColumnName("address_region")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50)
                                .IsUnicode(true);

                            b1.HasKey("BrandId");

                            b1.ToTable("brands");

                            b1.WithOwner()
                                .HasForeignKey("BrandId");
                        });
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.CatalogItems.CatalogItem", b =>
                {
                    b.HasOne("TreniniDotNet.Domain.Catalog.Brands.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreniniDotNet.Domain.Catalog.Scales.Scale", "Scale")
                        .WithMany()
                        .HasForeignKey("ScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.RollingStock", b =>
                {
                    b.HasOne("TreniniDotNet.Domain.Catalog.CatalogItems.CatalogItem", null)
                        .WithMany("RollingStocks")
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreniniDotNet.Domain.Catalog.Railways.Railway", "Railway")
                        .WithMany()
                        .HasForeignKey("RailwayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.LengthOverBuffer", "Length", b1 =>
                        {
                            b1.Property<Guid>("RollingStockId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Inches")
                                .HasColumnName("length_in")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Millimeters")
                                .HasColumnName("length_mm")
                                .HasColumnType("numeric");

                            b1.HasKey("RollingStockId");

                            b1.ToTable("rolling_stocks1");

                            b1.WithOwner()
                                .HasForeignKey("RollingStockId");
                        });
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.Railways.Railway", b =>
                {
                    b.OwnsOne("TreniniDotNet.Domain.Catalog.Railways.PeriodOfActivity", "PeriodOfActivity", b1 =>
                        {
                            b1.Property<Guid>("RailwayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime?>("OperatingSince")
                                .HasColumnName("operating_since")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime?>("OperatingUntil")
                                .HasColumnName("operating_until")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<bool>("RailwayStatus")
                                .HasColumnName("active")
                                .HasColumnType("boolean");

                            b1.HasKey("RailwayId");

                            b1.ToTable("railways");

                            b1.WithOwner()
                                .HasForeignKey("RailwayId");
                        });

                    b.OwnsOne("TreniniDotNet.Domain.Catalog.Railways.RailwayGauge", "TrackGauge", b1 =>
                        {
                            b1.Property<Guid>("RailwayId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Inches")
                                .HasColumnName("gauge_in")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Millimeters")
                                .HasColumnName("gauge_mm")
                                .HasColumnType("numeric");

                            b1.Property<string>("TrackGauge")
                                .IsRequired()
                                .HasColumnName("track_gauge")
                                .HasColumnType("character varying(10)")
                                .HasMaxLength(10);

                            b1.HasKey("RailwayId");

                            b1.ToTable("railways");

                            b1.WithOwner()
                                .HasForeignKey("RailwayId");
                        });

                    b.OwnsOne("TreniniDotNet.Domain.Catalog.Railways.RailwayLength", "TotalLength", b1 =>
                        {
                            b1.Property<Guid>("RailwayId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Kilometers")
                                .HasColumnName("total_length_km")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Miles")
                                .HasColumnName("total_length_mi")
                                .HasColumnType("numeric");

                            b1.HasKey("RailwayId");

                            b1.ToTable("railways");

                            b1.WithOwner()
                                .HasForeignKey("RailwayId");
                        });
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.Scales.Scale", b =>
                {
                    b.OwnsOne("TreniniDotNet.Domain.Catalog.Scales.ScaleGauge", "Gauge", b1 =>
                        {
                            b1.Property<Guid>("ScaleId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("InInches")
                                .HasColumnName("gauge_in")
                                .HasColumnType("numeric");

                            b1.Property<string>("TrackGauge")
                                .IsRequired()
                                .HasColumnName("track_type")
                                .HasColumnType("text");

                            b1.HasKey("ScaleId");

                            b1.ToTable("scales");

                            b1.WithOwner()
                                .HasForeignKey("ScaleId");
                        });
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Collecting.Collections.CollectionItem", b =>
                {
                    b.HasOne("TreniniDotNet.Domain.Catalog.CatalogItems.CatalogItem", "CatalogItem")
                        .WithMany()
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreniniDotNet.Domain.Collecting.Collections.Collection", null)
                        .WithMany("Items")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreniniDotNet.Domain.Collecting.Shops.Shop", "PurchasedAt")
                        .WithMany()
                        .HasForeignKey("PurchasedAtId");

                    b.OwnsOne("TreniniDotNet.Domain.Collecting.Shared.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("CollectionItemId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnName("price")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnName("currency")
                                .HasColumnType("character varying(3)")
                                .HasMaxLength(3);

                            b1.HasKey("CollectionItemId");

                            b1.ToTable("collection_items");

                            b1.WithOwner()
                                .HasForeignKey("CollectionItemId");
                        });
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Collecting.Shops.Shop", b =>
                {
                    b.OwnsOne("TreniniDotNet.SharedKernel.Addresses.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ShopId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnName("address_city")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50)
                                .IsUnicode(true);

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnName("address_country")
                                .HasColumnType("character varying(2)")
                                .HasMaxLength(2);

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnName("address_line1")
                                .HasColumnType("character varying(255)")
                                .HasMaxLength(255)
                                .IsUnicode(true);

                            b1.Property<string>("Line2")
                                .HasColumnName("address_line2")
                                .HasColumnType("character varying(255)")
                                .HasMaxLength(255)
                                .IsUnicode(true);

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnName("address_postal_code")
                                .HasColumnType("character varying(10)")
                                .HasMaxLength(10);

                            b1.Property<string>("Region")
                                .HasColumnName("address_region")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50)
                                .IsUnicode(true);

                            b1.HasKey("ShopId");

                            b1.ToTable("shops");

                            b1.WithOwner()
                                .HasForeignKey("ShopId");
                        });
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Collecting.Wishlists.Wishlist", b =>
                {
                    b.OwnsOne("TreniniDotNet.Domain.Collecting.Wishlists.Budget", "Budget", b1 =>
                        {
                            b1.Property<Guid>("WishlistId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnName("budget")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnName("currency")
                                .HasColumnType("character varying(3)")
                                .HasMaxLength(3);

                            b1.HasKey("WishlistId");

                            b1.ToTable("wishlists");

                            b1.WithOwner()
                                .HasForeignKey("WishlistId");
                        });
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Collecting.Wishlists.WishlistItem", b =>
                {
                    b.HasOne("TreniniDotNet.Domain.Catalog.CatalogItems.CatalogItem", "CatalogItem")
                        .WithMany()
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreniniDotNet.Domain.Collecting.Wishlists.Wishlist", null)
                        .WithMany("Items")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TreniniDotNet.Domain.Collecting.Shared.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("WishlistItemId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnName("price")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnName("currency")
                                .HasColumnType("character varying(3)")
                                .HasMaxLength(3);

                            b1.HasKey("WishlistItemId");

                            b1.ToTable("wishlist_items");

                            b1.WithOwner()
                                .HasForeignKey("WishlistItemId");
                        });
                });

            modelBuilder.Entity("TreniniDotNet.Infrastructure.Persistence.Collecting.ShopFavourite", b =>
                {
                    b.HasOne("TreniniDotNet.Domain.Collecting.Shops.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.Locomotive", b =>
                {
                    b.OwnsOne("TreniniDotNet.Domain.Catalog.CatalogItems.RollingStocks.Prototype", "Prototype", b1 =>
                        {
                            b1.Property<Guid>("LocomotiveId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ClassName")
                                .IsRequired()
                                .HasColumnName("class_name")
                                .HasColumnType("character varying(15)")
                                .HasMaxLength(15)
                                .IsUnicode(true);

                            b1.Property<string>("RoadNumber")
                                .IsRequired()
                                .HasColumnName("road_number")
                                .HasColumnType("character varying(15)")
                                .HasMaxLength(15)
                                .IsUnicode(true);

                            b1.Property<string>("Series")
                                .HasColumnName("series")
                                .HasColumnType("character varying(25)")
                                .HasMaxLength(25);

                            b1.HasKey("LocomotiveId");

                            b1.ToTable("rolling_stocks2");

                            b1.WithOwner()
                                .HasForeignKey("LocomotiveId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
