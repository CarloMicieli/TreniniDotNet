syntax = "proto3";

option csharp_namespace = "TreniniDotNet.Catalog";

package net.trenini.catalog;

service BrandsService {
  rpc CreateBrand(CreateBrandRequest) returns (CreateBrandResponse);
  rpc CreateBrands(stream CreateBrandRequest) returns (CreateBrandResponse);
}

message CreateBrandRequest {
  string name = 1;
  string website_url = 2;
  string email_address = 3;
  string company_name = 4;
  string group_name = 5;
  string description = 6;
  BrandKind kind = 7;
  Address address = 8;
}

message CreateBrandResponse {
  string slug = 1;
}

enum BrandKind {
  INDUSTRIAL = 0;
  BRASS_MODELS = 1;
}

message Address {
  string line1 = 1;
  string line2 = 2;
  string city = 3;
  string region = 4;
  string postal_code = 5;
  string country = 6;
}

service RailwaysService {
  rpc CreateRailway(CreateRailwayRequest) returns (CreateRailwayResponse);
  rpc CreateRailways(stream CreateRailwayRequest) returns (CreateRailwayResponse);
}

message CreateRailwayRequest {
  string name = 1;
  string company_name = 2;
  string country = 3;
  PeriodOfActivityRequest period_of_activity = 4;
  TotalRailwayLengthRequest total_length = 5;
  RailwayGaugeRequest gauge = 6;
  string website_url = 7;
  string headquarters = 8;
}

message PeriodOfActivityRequest {
  string status = 1;
  int64 operating_since = 2;
  int64 operating_until = 3;
}

message TotalRailwayLengthRequest {
  string track_gauge = 1;
  int64 millimeters = 2;
  int64 inches = 3;
}

message RailwayGaugeRequest {
  int64 kilometers = 1;
  int64 miles = 2;
}

message CreateRailwayResponse {
  string railway_id = 1;
  string slug = 2;
}

service ScalesService {
  rpc CreateScale(CreateScaleRequest) returns (CreateScaleResponse);
  rpc CreateScales(stream CreateScaleRequest) returns (CreateScaleResponse);
}

message CreateScaleRequest {
  string name = 1;
  int64 ratio = 2;
  ScaleGaugeRequest gauge = 3;
  string description = 4;
  int32 weight = 5;
  repeated string standard = 6;
}

message ScaleGaugeRequest {
  string track_gauge = 1;
  int64 inches = 2;
  int64 millimeters = 3;
}

message CreateScaleResponse {
  string scale_id = 1;
  string slug = 2;
}

service CatalogItemsService {
  rpc CreateCatalogItem(CreateCatalogItemRequest) returns (CreateCatalogItemResponse);
  rpc CreateCatalogItems(stream CreateCatalogItemRequest) returns (CreateCatalogItemResponse);
}

message CreateCatalogItemRequest {
  string brand = 1;
  string item_number = 2;
  string scale = 3;
  string description = 4;
  string prototype_description = 5;
  string model_description = 6;
  string delivery_date = 7;
  bool is_available = 8;
  PowerMethod power_method = 9;
  repeated RollingStock rolling_stocks = 10;
}

enum PowerMethod {
  NO_POWER_METHOD = 0;
  DC = 1;
  AC = 2;
}

message RollingStock {
  string railway = 1;
  Category category = 2;
  string era = 3;
  RollingStockLength length = 4;
  DccInterface dcc_interface = 5;
  Control control = 6;
  string class_name = 7;
  string road_number = 8;
  string type_name = 9;
  string service_level = 10;
  PassengerCarType passenger_car_type = 11;
  string livery = 12;
}

message RollingStockLength {
  float millimeters = 1;
  float inches = 2;
}

message CreateCatalogItemResponse {
  string catalog_item_id = 1;
  string slug = 2;
}

enum Category {
  NO_CATEGORY = 0;
  STEAM_LOCOMOTIVE = 1;
  DIESEL_LOCOMOTIVE = 2;
  ELECTRIC_LOCOMOTIVE = 3;
  RAILCAR = 4;
  ELECTRIC_MULTIPLE_UNIT = 5;
  FREIGHT_CAR = 6;
  PASSENGER_CAR = 7;
  TRAIN_SET = 8;
  STARTER_SET = 9;
}

enum DccInterface {
  NO_INTERFACE = 0;
  NEM651 = 1;
  NEM652 = 2;
  PLUX8 = 3;
  PLUX16 = 4;
  PLUX22 = 5;
  NEXT18 = 6;
  MTC21 = 7;
}

enum Control {
  NO_CONTROL = 0;
  DCC_READY = 1;
  DCC = 2;
  DCC_SOUND = 3;
}

enum PassengerCarType
{
  NO_TYPE = 0;
  OPEN_COACH = 1;
  COMPARTMENT_COACH = 2;
  DINING_CAR = 3;
  LOUNGE = 4;
  OBSERVATION = 5;
  SLEEPING_CAR = 6;
  BAGGAGE_CAR = 7;
  DOUBLE_DECKER = 8;
  COMBINE_CAR = 9;
  DRIVING_TRAILER = 10;
  RAILWAY_POST_OFFICE = 11;
}
