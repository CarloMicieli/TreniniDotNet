/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AccountClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    createAccount(account: Account): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/Account";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(account);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateAccount(_response);
        });
    }

    protected processCreateAccount(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class AuthenticateClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    login(login: Login): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(login);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class ErrorClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    errorLocalDevelopment(api_version: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/error-local-development?";
        if (api_version === undefined)
            throw new Error("The parameter 'api_version' must be defined.");
        else
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processErrorLocalDevelopment(_response);
        });
    }

    protected processErrorLocalDevelopment(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    error(api_version: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/error?";
        if (api_version === undefined)
            throw new Error("The parameter 'api_version' must be defined.");
        else
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processError(_response);
        });
    }

    protected processError(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class WishlistsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(id: string, itemId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/Wishlists/{id}/items/{itemId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (itemId === undefined || itemId === null)
            throw new Error("The parameter 'itemId' must be defined.");
        url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    editWishlistItem(id: string, itemId: string): Promise<EditWishlistItemOutput> {
        let url_ = this.baseUrl + "/api/v1/Wishlists/{id}/items/{itemId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (itemId === undefined || itemId === null)
            throw new Error("The parameter 'itemId' must be defined.");
        url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditWishlistItem(_response);
        });
    }

    protected processEditWishlistItem(response: Response): Promise<EditWishlistItemOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EditWishlistItemOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EditWishlistItemOutput>(<any>null);
    }

    getWishlists(owner: string | null, visibility: string | null | undefined): Promise<GetWishlistsByOwnerOutput> {
        let url_ = this.baseUrl + "/api/v1/Wishlists/owner/{owner}?";
        if (owner === undefined || owner === null)
            throw new Error("The parameter 'owner' must be defined.");
        url_ = url_.replace("{owner}", encodeURIComponent("" + owner));
        if (visibility !== undefined)
            url_ += "visibility=" + encodeURIComponent("" + visibility) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWishlists(_response);
        });
    }

    protected processGetWishlists(response: Response): Promise<GetWishlistsByOwnerOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetWishlistsByOwnerOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetWishlistsByOwnerOutput>(<any>null);
    }

    getWishlistById(id: string): Promise<GetWishlistByIdOutput> {
        let url_ = this.baseUrl + "/api/v1/Wishlists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWishlistById(_response);
        });
    }

    protected processGetWishlistById(response: Response): Promise<GetWishlistByIdOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetWishlistByIdOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetWishlistByIdOutput>(<any>null);
    }

    delete(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/Wishlists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    post(request: CreateWishlistRequest): Promise<CreateWishlistOutput> {
        let url_ = this.baseUrl + "/api/v1/Wishlists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<CreateWishlistOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateWishlistOutput.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateWishlistOutput>(<any>null);
    }

    post2(id: string, request: AddItemToWishlistRequest): Promise<AddItemToWishlistOutput> {
        let url_ = this.baseUrl + "/api/v1/Wishlists/{id}/items";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost2(_response);
        });
    }

    protected processPost2(response: Response): Promise<AddItemToWishlistOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddItemToWishlistOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AddItemToWishlistOutput>(<any>null);
    }
}

export class ShopsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(request: RemoveShopFromFavouritesRequest): Promise<RemoveShopFromFavouritesOutput> {
        let url_ = this.baseUrl + "/api/v1/Shops/favourites";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<RemoveShopFromFavouritesOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RemoveShopFromFavouritesOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RemoveShopFromFavouritesOutput>(<any>null);
    }

    get2(request: GetFavouriteShopsRequest): Promise<GetFavouriteShopsOutput> {
        let url_ = this.baseUrl + "/api/v1/Shops/favourites";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet2(_response);
        });
    }

    protected processGet2(response: Response): Promise<GetFavouriteShopsOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetFavouriteShopsOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetFavouriteShopsOutput>(<any>null);
    }

    post2(request: AddShopToFavouritesRequest): Promise<AddShopToFavouritesOutput> {
        let url_ = this.baseUrl + "/api/v1/Shops/favourites";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost2(_response);
        });
    }

    protected processPost2(response: Response): Promise<AddShopToFavouritesOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddShopToFavouritesOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AddShopToFavouritesOutput>(<any>null);
    }

    post(start: number | undefined, limit: number | undefined): Promise<GetShopsListOutput> {
        let url_ = this.baseUrl + "/api/v1/Shops?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<GetShopsListOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetShopsListOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetShopsListOutput>(<any>null);
    }

    post22(request: CreateShopRequest): Promise<CreateShopOutput> {
        let url_ = this.baseUrl + "/api/v1/Shops";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost22(_response);
        });
    }

    protected processPost22(response: Response): Promise<CreateShopOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateShopOutput.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateShopOutput>(<any>null);
    }

    getShopBySlug(slug: string | null): Promise<GetShopBySlugOutput> {
        let url_ = this.baseUrl + "/api/v1/Shops/{slug}";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetShopBySlug(_response);
        });
    }

    protected processGetShopBySlug(response: Response): Promise<GetShopBySlugOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetShopBySlugOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetShopBySlugOutput>(<any>null);
    }
}

export class CollectionsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    put(id: string, itemId: string): Promise<RemoveItemFromCollectionOutput> {
        let url_ = this.baseUrl + "/api/v1/Collections/{id}/items/{itemId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (itemId === undefined || itemId === null)
            throw new Error("The parameter 'itemId' must be defined.");
        url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<RemoveItemFromCollectionOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            let result204: any = null;
            let resultData204 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result204 = RemoveItemFromCollectionOutput.fromJS(resultData204);
            return result204;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RemoveItemFromCollectionOutput>(<any>null);
    }

    editCollectionItem(id: string, itemId: string, request: EditCollectionItemRequest): Promise<EditCollectionItemOutput> {
        let url_ = this.baseUrl + "/api/v1/Collections/{id}/items/{itemId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (itemId === undefined || itemId === null)
            throw new Error("The parameter 'itemId' must be defined.");
        url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditCollectionItem(_response);
        });
    }

    protected processEditCollectionItem(response: Response): Promise<EditCollectionItemOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EditCollectionItemOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EditCollectionItemOutput>(<any>null);
    }

    get(id: string): Promise<GetCollectionStatisticsOutput> {
        let url_ = this.baseUrl + "/api/v1/Collections/{id}/statistics";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<GetCollectionStatisticsOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCollectionStatisticsOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCollectionStatisticsOutput>(<any>null);
    }

    getCollectionByOwner(id: string): Promise<GetCollectionByOwnerOutput> {
        let url_ = this.baseUrl + "/api/v1/Collections/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCollectionByOwner(_response);
        });
    }

    protected processGetCollectionByOwner(response: Response): Promise<GetCollectionByOwnerOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCollectionByOwnerOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCollectionByOwnerOutput>(<any>null);
    }

    post(request: CreateCollectionRequest): Promise<CreateCollectionOutput> {
        let url_ = this.baseUrl + "/api/v1/Collections";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<CreateCollectionOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateCollectionOutput.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateCollectionOutput>(<any>null);
    }

    post2(id: string, request: AddItemToCollectionRequest): Promise<AddItemToCollectionOutput> {
        let url_ = this.baseUrl + "/api/v1/Collections/{id}/items";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost2(_response);
        });
    }

    protected processPost2(response: Response): Promise<AddItemToCollectionOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddItemToCollectionOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AddItemToCollectionOutput>(<any>null);
    }
}

export class ScalesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getScales(start: number | undefined, limit: number | undefined): Promise<PaginatedViewModelOfScaleView> {
        let url_ = this.baseUrl + "/api/v1/Scales?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetScales(_response);
        });
    }

    protected processGetScales(response: Response): Promise<PaginatedViewModelOfScaleView> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedViewModelOfScaleView.fromJS(resultData200);
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedViewModelOfScaleView>(<any>null);
    }

    post(request: CreateScaleRequest): Promise<CreateScaleOutput> {
        let url_ = this.baseUrl + "/api/v1/Scales";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<CreateScaleOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateScaleOutput.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateScaleOutput>(<any>null);
    }

    getScaleBySlug(slug: string | null): Promise<ScaleView> {
        let url_ = this.baseUrl + "/api/v1/Scales/{slug}";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetScaleBySlug(_response);
        });
    }

    protected processGetScaleBySlug(response: Response): Promise<ScaleView> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScaleView.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ScaleView>(<any>null);
    }

    editScale(slug: string | null, request: EditScaleRequest): Promise<EditScaleOutput> {
        let url_ = this.baseUrl + "/api/v1/Scales/{slug}";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditScale(_response);
        });
    }

    protected processEditScale(response: Response): Promise<EditScaleOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EditScaleOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EditScaleOutput>(<any>null);
    }
}

export class RailwaysClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getRailways(start: number | undefined, limit: number | undefined): Promise<PaginatedViewModelOfRailwayView> {
        let url_ = this.baseUrl + "/api/v1/Railways?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRailways(_response);
        });
    }

    protected processGetRailways(response: Response): Promise<PaginatedViewModelOfRailwayView> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedViewModelOfRailwayView.fromJS(resultData200);
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedViewModelOfRailwayView>(<any>null);
    }

    postRailway(brandRequest: CreateRailwayRequest): Promise<CreateRailwayOutput> {
        let url_ = this.baseUrl + "/api/v1/Railways";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(brandRequest);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostRailway(_response);
        });
    }

    protected processPostRailway(response: Response): Promise<CreateRailwayOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateRailwayOutput.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateRailwayOutput>(<any>null);
    }

    getRailwayBySlug(slug: string | null): Promise<RailwayView> {
        let url_ = this.baseUrl + "/api/v1/Railways/{slug}";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRailwayBySlug(_response);
        });
    }

    protected processGetRailwayBySlug(response: Response): Promise<RailwayView> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RailwayView.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RailwayView>(<any>null);
    }

    editRailway(slug: string | null, request: EditRailwayRequest): Promise<EditRailwayOutput> {
        let url_ = this.baseUrl + "/api/v1/Railways/{slug}";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditRailway(_response);
        });
    }

    protected processEditRailway(response: Response): Promise<EditRailwayOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EditRailwayOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EditRailwayOutput>(<any>null);
    }
}

export class CatalogItemsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    deleteRollingStock(slug: string | null, rollingStockId: string): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/CatalogItems/{slug}/rollingStocks/{rollingStockId}";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        if (rollingStockId === undefined || rollingStockId === null)
            throw new Error("The parameter 'rollingStockId' must be defined.");
        url_ = url_.replace("{rollingStockId}", encodeURIComponent("" + rollingStockId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteRollingStock(_response);
        });
    }

    protected processDeleteRollingStock(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    editRollingStock(slug: string | null, rollingStockId: string, request: EditRollingStockRequest): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/CatalogItems/{slug}/rollingStocks/{rollingStockId}";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        if (rollingStockId === undefined || rollingStockId === null)
            throw new Error("The parameter 'rollingStockId' must be defined.");
        url_ = url_.replace("{rollingStockId}", encodeURIComponent("" + rollingStockId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditRollingStock(_response);
        });
    }

    protected processEditRollingStock(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    getLatestCatalogItems(start: number | undefined, limit: number | undefined): Promise<CatalogItemView> {
        let url_ = this.baseUrl + "/api/v1/CatalogItems/latest?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLatestCatalogItems(_response);
        });
    }

    protected processGetLatestCatalogItems(response: Response): Promise<CatalogItemView> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CatalogItemView.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CatalogItemView>(<any>null);
    }

    getCatalogItemBySlug(slug: string | null): Promise<CatalogItemView> {
        let url_ = this.baseUrl + "/api/v1/CatalogItems/{slug}";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCatalogItemBySlug(_response);
        });
    }

    protected processGetCatalogItemBySlug(response: Response): Promise<CatalogItemView> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CatalogItemView.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CatalogItemView>(<any>null);
    }

    editCatalogItem(slug: string | null, request: EditCatalogItemRequest): Promise<EditCatalogItemOutput> {
        let url_ = this.baseUrl + "/api/v1/CatalogItems/{slug}";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditCatalogItem(_response);
        });
    }

    protected processEditCatalogItem(response: Response): Promise<EditCatalogItemOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EditCatalogItemOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EditCatalogItemOutput>(<any>null);
    }

    post(request: CreateCatalogItemRequest): Promise<CreateCatalogItemOutput> {
        let url_ = this.baseUrl + "/api/v1/CatalogItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<CreateCatalogItemOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateCatalogItemOutput.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = ProblemDetails.fromJS(resultData422);
            return throwException("A server side error occurred.", status, _responseText, _headers, result422);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateCatalogItemOutput>(<any>null);
    }

    postRollingStock(slug: string | null, request: RollingStockRequest): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/CatalogItems/{slug}/rollingStocks";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostRollingStock(_response);
        });
    }

    protected processPostRollingStock(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class BrandsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getBrands(start: number | undefined, limit: number | undefined): Promise<PaginatedViewModelOfBrandView> {
        let url_ = this.baseUrl + "/api/v1/Brands?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBrands(_response);
        });
    }

    protected processGetBrands(response: Response): Promise<PaginatedViewModelOfBrandView> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedViewModelOfBrandView.fromJS(resultData200);
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedViewModelOfBrandView>(<any>null);
    }

    post(request: CreateBrandRequest): Promise<CreateBrandOutput> {
        let url_ = this.baseUrl + "/api/v1/Brands";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<CreateBrandOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateBrandOutput.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateBrandOutput>(<any>null);
    }

    getBrandBySlug(slug: string | null): Promise<BrandView> {
        let url_ = this.baseUrl + "/api/v1/Brands/{slug}";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBrandBySlug(_response);
        });
    }

    protected processGetBrandBySlug(response: Response): Promise<BrandView> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandView.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandView>(<any>null);
    }

    editBrand(slug: string | null, request: EditBrandRequest): Promise<EditBrandOutput> {
        let url_ = this.baseUrl + "/api/v1/Brands/{slug}";
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditBrand(_response);
        });
    }

    protected processEditBrand(response: Response): Promise<EditBrandOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EditBrandOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EditBrandOutput>(<any>null);
    }
}

export class Account implements IAccount {
    username?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;

    constructor(data?: IAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): Account {
        data = typeof data === 'object' ? data : {};
        let result = new Account();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        return data; 
    }
}

export interface IAccount {
    username?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
}

export class Login implements ILogin {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): Login {
        data = typeof data === 'object' ? data : {};
        let result = new Login();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILogin {
    username?: string | undefined;
    password?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                this.extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        this.extensions![key] = _data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;
}

export class GetWishlistsByOwnerOutput implements IGetWishlistsByOwnerOutput {
    owner?: Owner;
    visibility?: VisibilityCriteria;
    wishlists?: IWishlistInfo[];

    constructor(data?: IGetWishlistsByOwnerOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.owner = _data["owner"] ? Owner.fromJS(_data["owner"]) : <any>undefined;
            this.visibility = _data["visibility"];
            if (Array.isArray(_data["wishlists"])) {
                this.wishlists = [] as any;
                for (let item of _data["wishlists"])
                    this.wishlists!.push(IWishlistInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetWishlistsByOwnerOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetWishlistsByOwnerOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["visibility"] = this.visibility;
        if (Array.isArray(this.wishlists)) {
            data["wishlists"] = [];
            for (let item of this.wishlists)
                data["wishlists"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetWishlistsByOwnerOutput {
    owner?: Owner;
    visibility?: VisibilityCriteria;
    wishlists?: IWishlistInfo[];
}

export class Owner implements IOwner {
    value?: string;

    constructor(data?: IOwner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Owner {
        data = typeof data === 'object' ? data : {};
        let result = new Owner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data; 
    }
}

export interface IOwner {
    value?: string;
}

export enum VisibilityCriteria {
    All = 0,
    Public = 1,
    Private = 2,
}

export abstract class IWishlistInfo implements IIWishlistInfo {
    wishlistId?: WishlistId;
    slug?: Slug;
    listName?: string | undefined;
    visibility?: Visibility;

    constructor(data?: IIWishlistInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wishlistId = _data["wishlistId"] ? WishlistId.fromJS(_data["wishlistId"]) : <any>undefined;
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
            this.listName = _data["listName"];
            this.visibility = _data["visibility"];
        }
    }

    static fromJS(data: any): IWishlistInfo {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IWishlistInfo' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wishlistId"] = this.wishlistId ? this.wishlistId.toJSON() : <any>undefined;
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        data["listName"] = this.listName;
        data["visibility"] = this.visibility;
        return data; 
    }
}

export interface IIWishlistInfo {
    wishlistId?: WishlistId;
    slug?: Slug;
    listName?: string | undefined;
    visibility?: Visibility;
}

export class WishlistId implements IWishlistId {

    constructor(data?: IWishlistId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): WishlistId {
        data = typeof data === 'object' ? data : {};
        let result = new WishlistId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IWishlistId {
}

export class Slug implements ISlug {
    value?: string;

    constructor(data?: ISlug) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Slug {
        data = typeof data === 'object' ? data : {};
        let result = new Slug();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data; 
    }
}

export interface ISlug {
    value?: string;
}

export enum Visibility {
    Public = 0,
    Private = 1,
}

export class GetWishlistByIdOutput implements IGetWishlistByIdOutput {
    wishlist?: IWishlist;

    constructor(data?: IGetWishlistByIdOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wishlist = _data["wishlist"] ? IWishlist.fromJS(_data["wishlist"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetWishlistByIdOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetWishlistByIdOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wishlist"] = this.wishlist ? this.wishlist.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetWishlistByIdOutput {
    wishlist?: IWishlist;
}

export abstract class IWishlist implements IIWishlist {
    owner?: Owner;
    items?: IWishlistItem[];

    constructor(data?: IIWishlist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.owner = _data["owner"] ? Owner.fromJS(_data["owner"]) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(IWishlistItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IWishlist {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IWishlist' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIWishlist {
    owner?: Owner;
    items?: IWishlistItem[];
}

export abstract class IWishlistItem implements IIWishlistItem {
    itemId?: WishlistItemId;
    priority?: Priority;
    addedDate?: Date;
    price?: Money | undefined;
    catalogItem?: ICatalogRef;
    details?: ICatalogItemDetails | undefined;
    notes?: string | undefined;

    constructor(data?: IIWishlistItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.itemId = _data["itemId"] ? WishlistItemId.fromJS(_data["itemId"]) : <any>undefined;
            this.priority = _data["priority"];
            this.addedDate = _data["addedDate"] ? new Date(_data["addedDate"].toString()) : <any>undefined;
            this.price = _data["price"] ? Money.fromJS(_data["price"]) : <any>undefined;
            this.catalogItem = _data["catalogItem"] ? ICatalogRef.fromJS(_data["catalogItem"]) : <any>undefined;
            this.details = _data["details"] ? ICatalogItemDetails.fromJS(_data["details"]) : <any>undefined;
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): IWishlistItem {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IWishlistItem' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemId"] = this.itemId ? this.itemId.toJSON() : <any>undefined;
        data["priority"] = this.priority;
        data["addedDate"] = this.addedDate ? formatDate(this.addedDate) : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["catalogItem"] = this.catalogItem ? this.catalogItem.toJSON() : <any>undefined;
        data["details"] = this.details ? this.details.toJSON() : <any>undefined;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface IIWishlistItem {
    itemId?: WishlistItemId;
    priority?: Priority;
    addedDate?: Date;
    price?: Money | undefined;
    catalogItem?: ICatalogRef;
    details?: ICatalogItemDetails | undefined;
    notes?: string | undefined;
}

export class WishlistItemId implements IWishlistItemId {

    constructor(data?: IWishlistItemId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): WishlistItemId {
        data = typeof data === 'object' ? data : {};
        let result = new WishlistItemId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IWishlistItemId {
}

export enum Priority {
    High = 0,
    Normal = 1,
    Low = 2,
}

export class Money implements IMoney {
    amount?: number;
    currency?: Currency;

    constructor(data?: IMoney) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.currency = _data["currency"] ? Currency.fromJS(_data["currency"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Money {
        data = typeof data === 'object' ? data : {};
        let result = new Money();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMoney {
    amount?: number;
    currency?: Currency;
}

export class Currency implements ICurrency {
    code?: string | undefined;

    constructor(data?: ICurrency) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): Currency {
        data = typeof data === 'object' ? data : {};
        let result = new Currency();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data; 
    }
}

export interface ICurrency {
    code?: string | undefined;
}

export abstract class ICatalogRef implements IICatalogRef {
    catalogItemId?: CatalogItemId;
    slug?: Slug;

    constructor(data?: IICatalogRef) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.catalogItemId = _data["catalogItemId"] ? CatalogItemId.fromJS(_data["catalogItemId"]) : <any>undefined;
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ICatalogRef {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ICatalogRef' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["catalogItemId"] = this.catalogItemId ? this.catalogItemId.toJSON() : <any>undefined;
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IICatalogRef {
    catalogItemId?: CatalogItemId;
    slug?: Slug;
}

export class CatalogItemId implements ICatalogItemId {

    constructor(data?: ICatalogItemId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): CatalogItemId {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogItemId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface ICatalogItemId {
}

export abstract class ICatalogItemDetails implements IICatalogItemDetails {
    brand?: IBrandRef;
    itemNumber?: ItemNumber;
    category?: CollectionCategory;
    scale?: IScaleRef;
    rollingStocksCount?: number;
    description?: string;

    constructor(data?: IICatalogItemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brand = _data["brand"] ? IBrandRef.fromJS(_data["brand"]) : <any>undefined;
            this.itemNumber = _data["itemNumber"] ? ItemNumber.fromJS(_data["itemNumber"]) : <any>undefined;
            this.category = _data["category"];
            this.scale = _data["scale"] ? IScaleRef.fromJS(_data["scale"]) : <any>undefined;
            this.rollingStocksCount = _data["rollingStocksCount"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): ICatalogItemDetails {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ICatalogItemDetails' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        data["itemNumber"] = this.itemNumber ? this.itemNumber.toJSON() : <any>undefined;
        data["category"] = this.category;
        data["scale"] = this.scale ? this.scale.toJSON() : <any>undefined;
        data["rollingStocksCount"] = this.rollingStocksCount;
        data["description"] = this.description;
        return data; 
    }
}

export interface IICatalogItemDetails {
    brand?: IBrandRef;
    itemNumber?: ItemNumber;
    category?: CollectionCategory;
    scale?: IScaleRef;
    rollingStocksCount?: number;
    description?: string;
}

export abstract class IBrandRef implements IIBrandRef {
    name?: string;
    slug?: Slug;

    constructor(data?: IIBrandRef) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IBrandRef {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IBrandRef' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIBrandRef {
    name?: string;
    slug?: Slug;
}

export class ItemNumber implements IItemNumber {
    value?: string;

    constructor(data?: IItemNumber) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ItemNumber {
        data = typeof data === 'object' ? data : {};
        let result = new ItemNumber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data; 
    }
}

export interface IItemNumber {
    value?: string;
}

export enum CollectionCategory {
    Unspecified = 0,
    Trains = 1,
    Locomotives = 2,
    PassengerCars = 3,
    FreightCars = 4,
}

export abstract class IScaleRef implements IIScaleRef {
    name?: string;
    slug?: Slug;

    constructor(data?: IIScaleRef) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IScaleRef {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IScaleRef' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIScaleRef {
    name?: string;
    slug?: Slug;
}

export class EditWishlistItemOutput implements IEditWishlistItemOutput {
    id?: WishlistId;
    itemId?: WishlistItemId;

    constructor(data?: IEditWishlistItemOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? WishlistId.fromJS(_data["id"]) : <any>undefined;
            this.itemId = _data["itemId"] ? WishlistItemId.fromJS(_data["itemId"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditWishlistItemOutput {
        data = typeof data === 'object' ? data : {};
        let result = new EditWishlistItemOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["itemId"] = this.itemId ? this.itemId.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditWishlistItemOutput {
    id?: WishlistId;
    itemId?: WishlistItemId;
}

export class CreateWishlistOutput implements ICreateWishlistOutput {
    wishlistId?: WishlistId;
    slug?: Slug;

    constructor(data?: ICreateWishlistOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wishlistId = _data["wishlistId"] ? WishlistId.fromJS(_data["wishlistId"]) : <any>undefined;
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateWishlistOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWishlistOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wishlistId"] = this.wishlistId ? this.wishlistId.toJSON() : <any>undefined;
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateWishlistOutput {
    wishlistId?: WishlistId;
    slug?: Slug;
}

export class CreateWishlistRequest implements ICreateWishlistRequest {
    listName?: string | undefined;
    visibility?: string | undefined;

    constructor(data?: ICreateWishlistRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.listName = _data["listName"];
            this.visibility = _data["visibility"];
        }
    }

    static fromJS(data: any): CreateWishlistRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWishlistRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listName"] = this.listName;
        data["visibility"] = this.visibility;
        return data; 
    }
}

export interface ICreateWishlistRequest {
    listName?: string | undefined;
    visibility?: string | undefined;
}

export class AddItemToWishlistOutput implements IAddItemToWishlistOutput {
    id?: WishlistId;
    itemId?: WishlistItemId;

    constructor(data?: IAddItemToWishlistOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? WishlistId.fromJS(_data["id"]) : <any>undefined;
            this.itemId = _data["itemId"] ? WishlistItemId.fromJS(_data["itemId"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddItemToWishlistOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AddItemToWishlistOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["itemId"] = this.itemId ? this.itemId.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAddItemToWishlistOutput {
    id?: WishlistId;
    itemId?: WishlistItemId;
}

export class AddItemToWishlistRequest implements IAddItemToWishlistRequest {
    catalogItem?: string | undefined;
    addedDate?: Date;
    price?: number | undefined;
    priority?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IAddItemToWishlistRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.catalogItem = _data["catalogItem"];
            this.addedDate = _data["addedDate"] ? new Date(_data["addedDate"].toString()) : <any>undefined;
            this.price = _data["price"];
            this.priority = _data["priority"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): AddItemToWishlistRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddItemToWishlistRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["catalogItem"] = this.catalogItem;
        data["addedDate"] = this.addedDate ? this.addedDate.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["priority"] = this.priority;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface IAddItemToWishlistRequest {
    catalogItem?: string | undefined;
    addedDate?: Date;
    price?: number | undefined;
    priority?: string | undefined;
    notes?: string | undefined;
}

export class RemoveShopFromFavouritesOutput implements IRemoveShopFromFavouritesOutput {

    constructor(data?: IRemoveShopFromFavouritesOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): RemoveShopFromFavouritesOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveShopFromFavouritesOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IRemoveShopFromFavouritesOutput {
}

export class RemoveShopFromFavouritesRequest implements IRemoveShopFromFavouritesRequest {

    constructor(data?: IRemoveShopFromFavouritesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): RemoveShopFromFavouritesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveShopFromFavouritesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IRemoveShopFromFavouritesRequest {
}

export class GetShopsListOutput implements IGetShopsListOutput {
    shops?: PaginatedResultOfIShop;

    constructor(data?: IGetShopsListOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shops = _data["shops"] ? PaginatedResultOfIShop.fromJS(_data["shops"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetShopsListOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetShopsListOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shops"] = this.shops ? this.shops.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetShopsListOutput {
    shops?: PaginatedResultOfIShop;
}

export class PaginatedResultOfIShop implements IPaginatedResultOfIShop {
    currentPage?: Page;
    hasPrevious?: boolean;
    hasNext?: boolean;
    results?: IShop[];

    constructor(data?: IPaginatedResultOfIShop) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentPage = _data["currentPage"] ? Page.fromJS(_data["currentPage"]) : <any>undefined;
            this.hasPrevious = _data["hasPrevious"];
            this.hasNext = _data["hasNext"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(IShop.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedResultOfIShop {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResultOfIShop();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPage"] = this.currentPage ? this.currentPage.toJSON() : <any>undefined;
        data["hasPrevious"] = this.hasPrevious;
        data["hasNext"] = this.hasNext;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPaginatedResultOfIShop {
    currentPage?: Page;
    hasPrevious?: boolean;
    hasNext?: boolean;
    results?: IShop[];
}

export class Page implements IPage {
    limit?: number;
    start?: number;

    constructor(data?: IPage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.limit = _data["limit"];
            this.start = _data["start"];
        }
    }

    static fromJS(data: any): Page {
        data = typeof data === 'object' ? data : {};
        let result = new Page();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limit"] = this.limit;
        data["start"] = this.start;
        return data; 
    }
}

export interface IPage {
    limit?: number;
    start?: number;
}

export abstract class IShop implements IIShop {
    websiteUrl?: string | undefined;
    emailAddress?: MailAddress | undefined;
    address?: Address | undefined;
    phoneNumber?: PhoneNumber | undefined;

    constructor(data?: IIShop) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.websiteUrl = _data["websiteUrl"];
            this.emailAddress = _data["emailAddress"] ? MailAddress.fromJS(_data["emailAddress"]) : <any>undefined;
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.phoneNumber = _data["phoneNumber"] ? PhoneNumber.fromJS(_data["phoneNumber"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IShop {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IShop' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["websiteUrl"] = this.websiteUrl;
        data["emailAddress"] = this.emailAddress ? this.emailAddress.toJSON() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["phoneNumber"] = this.phoneNumber ? this.phoneNumber.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIShop {
    websiteUrl?: string | undefined;
    emailAddress?: MailAddress | undefined;
    address?: Address | undefined;
    phoneNumber?: PhoneNumber | undefined;
}

export class MailAddress implements IMailAddress {
    displayName?: string | undefined;
    user?: string | undefined;
    host?: string | undefined;
    address?: string | undefined;

    constructor(data?: IMailAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.user = _data["user"];
            this.host = _data["host"];
            this.address = _data["address"];
        }
    }

    static fromJS(data: any): MailAddress {
        data = typeof data === 'object' ? data : {};
        let result = new MailAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["user"] = this.user;
        data["host"] = this.host;
        data["address"] = this.address;
        return data; 
    }
}

export interface IMailAddress {
    displayName?: string | undefined;
    user?: string | undefined;
    host?: string | undefined;
    address?: string | undefined;
}

export class Address implements IAddress {
    line1?: string;
    line2?: string | undefined;
    city?: string;
    region?: string | undefined;
    postalCode?: string;
    country?: string;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.line1 = _data["line1"];
            this.line2 = _data["line2"];
            this.city = _data["city"];
            this.region = _data["region"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["line1"] = this.line1;
        data["line2"] = this.line2;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddress {
    line1?: string;
    line2?: string | undefined;
    city?: string;
    region?: string | undefined;
    postalCode?: string;
    country?: string;
}

export class PhoneNumber implements IPhoneNumber {
    value?: string;

    constructor(data?: IPhoneNumber) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): PhoneNumber {
        data = typeof data === 'object' ? data : {};
        let result = new PhoneNumber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data; 
    }
}

export interface IPhoneNumber {
    value?: string;
}

export class GetShopBySlugOutput implements IGetShopBySlugOutput {
    shop?: IShop;

    constructor(data?: IGetShopBySlugOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shop = _data["shop"] ? IShop.fromJS(_data["shop"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetShopBySlugOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetShopBySlugOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shop"] = this.shop ? this.shop.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetShopBySlugOutput {
    shop?: IShop;
}

export class GetFavouriteShopsOutput implements IGetFavouriteShopsOutput {

    constructor(data?: IGetFavouriteShopsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetFavouriteShopsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetFavouriteShopsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetFavouriteShopsOutput {
}

export class GetFavouriteShopsRequest implements IGetFavouriteShopsRequest {

    constructor(data?: IGetFavouriteShopsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetFavouriteShopsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetFavouriteShopsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetFavouriteShopsRequest {
}

export class CreateShopOutput implements ICreateShopOutput {
    id?: ShopId;
    slug?: Slug;

    constructor(data?: ICreateShopOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? ShopId.fromJS(_data["id"]) : <any>undefined;
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateShopOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateShopOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateShopOutput {
    id?: ShopId;
    slug?: Slug;
}

export class ShopId implements IShopId {

    constructor(data?: IShopId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ShopId {
        data = typeof data === 'object' ? data : {};
        let result = new ShopId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IShopId {
}

export class CreateShopRequest implements ICreateShopRequest {
    name?: string | undefined;
    websiteUrl?: string | undefined;
    address?: AddressRequest | undefined;
    emailAddress?: string | undefined;
    phoneNumber?: string | undefined;

    constructor(data?: ICreateShopRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.websiteUrl = _data["websiteUrl"];
            this.address = _data["address"] ? AddressRequest.fromJS(_data["address"]) : <any>undefined;
            this.emailAddress = _data["emailAddress"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): CreateShopRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateShopRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["websiteUrl"] = this.websiteUrl;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        return data; 
    }
}

export interface ICreateShopRequest {
    name?: string | undefined;
    websiteUrl?: string | undefined;
    address?: AddressRequest | undefined;
    emailAddress?: string | undefined;
    phoneNumber?: string | undefined;
}

export class AddressRequest implements IAddressRequest {
    line1?: string | undefined;
    line2?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;

    constructor(data?: IAddressRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.line1 = _data["line1"];
            this.line2 = _data["line2"];
            this.city = _data["city"];
            this.region = _data["region"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): AddressRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddressRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["line1"] = this.line1;
        data["line2"] = this.line2;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddressRequest {
    line1?: string | undefined;
    line2?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
}

export class AddShopToFavouritesOutput implements IAddShopToFavouritesOutput {

    constructor(data?: IAddShopToFavouritesOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddShopToFavouritesOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AddShopToFavouritesOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddShopToFavouritesOutput {
}

export class AddShopToFavouritesRequest implements IAddShopToFavouritesRequest {

    constructor(data?: IAddShopToFavouritesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddShopToFavouritesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddShopToFavouritesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddShopToFavouritesRequest {
}

export class RemoveItemFromCollectionOutput implements IRemoveItemFromCollectionOutput {
    collectionId?: CollectionId;
    itemId?: CollectionItemId;

    constructor(data?: IRemoveItemFromCollectionOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.collectionId = _data["collectionId"] ? CollectionId.fromJS(_data["collectionId"]) : <any>undefined;
            this.itemId = _data["itemId"] ? CollectionItemId.fromJS(_data["itemId"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RemoveItemFromCollectionOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveItemFromCollectionOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collectionId"] = this.collectionId ? this.collectionId.toJSON() : <any>undefined;
        data["itemId"] = this.itemId ? this.itemId.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IRemoveItemFromCollectionOutput {
    collectionId?: CollectionId;
    itemId?: CollectionItemId;
}

export class CollectionId implements ICollectionId {

    constructor(data?: ICollectionId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): CollectionId {
        data = typeof data === 'object' ? data : {};
        let result = new CollectionId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface ICollectionId {
}

export class CollectionItemId implements ICollectionItemId {

    constructor(data?: ICollectionItemId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): CollectionItemId {
        data = typeof data === 'object' ? data : {};
        let result = new CollectionItemId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface ICollectionItemId {
}

export class GetCollectionStatisticsOutput implements IGetCollectionStatisticsOutput {
    statistics?: ICollectionStats;

    constructor(data?: IGetCollectionStatisticsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statistics = _data["statistics"] ? ICollectionStats.fromJS(_data["statistics"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCollectionStatisticsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCollectionStatisticsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statistics"] = this.statistics ? this.statistics.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCollectionStatisticsOutput {
    statistics?: ICollectionStats;
}

export abstract class ICollectionStats implements IICollectionStats {
    id?: CollectionId;
    owner?: Owner;
    modifiedDate?: Date;
    totalValue?: Money;
    categoriesByYear?: ICollectionStatsItem[];

    constructor(data?: IICollectionStats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? CollectionId.fromJS(_data["id"]) : <any>undefined;
            this.owner = _data["owner"] ? Owner.fromJS(_data["owner"]) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.totalValue = _data["totalValue"] ? Money.fromJS(_data["totalValue"]) : <any>undefined;
            if (Array.isArray(_data["categoriesByYear"])) {
                this.categoriesByYear = [] as any;
                for (let item of _data["categoriesByYear"])
                    this.categoriesByYear!.push(ICollectionStatsItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ICollectionStats {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ICollectionStats' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["totalValue"] = this.totalValue ? this.totalValue.toJSON() : <any>undefined;
        if (Array.isArray(this.categoriesByYear)) {
            data["categoriesByYear"] = [];
            for (let item of this.categoriesByYear)
                data["categoriesByYear"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IICollectionStats {
    id?: CollectionId;
    owner?: Owner;
    modifiedDate?: Date;
    totalValue?: Money;
    categoriesByYear?: ICollectionStatsItem[];
}

export abstract class ICollectionStatsItem implements IICollectionStatsItem {
    category?: CollectionCategory;
    count?: number;
    year?: Year;
    totalValue?: Money;

    constructor(data?: IICollectionStatsItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.category = _data["category"];
            this.count = _data["count"];
            this.year = _data["year"] ? Year.fromJS(_data["year"]) : <any>undefined;
            this.totalValue = _data["totalValue"] ? Money.fromJS(_data["totalValue"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ICollectionStatsItem {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ICollectionStatsItem' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category;
        data["count"] = this.count;
        data["year"] = this.year ? this.year.toJSON() : <any>undefined;
        data["totalValue"] = this.totalValue ? this.totalValue.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IICollectionStatsItem {
    category?: CollectionCategory;
    count?: number;
    year?: Year;
    totalValue?: Money;
}

export class Year implements IYear {
    value?: number;

    constructor(data?: IYear) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Year {
        data = typeof data === 'object' ? data : {};
        let result = new Year();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data; 
    }
}

export interface IYear {
    value?: number;
}

export class GetCollectionByOwnerOutput implements IGetCollectionByOwnerOutput {
    collection?: ICollection;

    constructor(data?: IGetCollectionByOwnerOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.collection = _data["collection"] ? ICollection.fromJS(_data["collection"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCollectionByOwnerOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCollectionByOwnerOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collection"] = this.collection ? this.collection.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCollectionByOwnerOutput {
    collection?: ICollection;
}

export abstract class ICollection implements IICollection {
    collectionId?: CollectionId;
    owner?: Owner;
    items?: ICollectionItem[];

    constructor(data?: IICollection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.collectionId = _data["collectionId"] ? CollectionId.fromJS(_data["collectionId"]) : <any>undefined;
            this.owner = _data["owner"] ? Owner.fromJS(_data["owner"]) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ICollectionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ICollection {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ICollection' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collectionId"] = this.collectionId ? this.collectionId.toJSON() : <any>undefined;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IICollection {
    collectionId?: CollectionId;
    owner?: Owner;
    items?: ICollectionItem[];
}

export abstract class ICollectionItem implements IICollectionItem {
    itemId?: CollectionItemId;
    catalogItem?: ICatalogRef;
    details?: ICatalogItemDetails | undefined;
    condition?: Condition;
    price?: Money;
    purchasedAt?: IShopInfo | undefined;
    addedDate?: Date;
    notes?: string | undefined;

    constructor(data?: IICollectionItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.itemId = _data["itemId"] ? CollectionItemId.fromJS(_data["itemId"]) : <any>undefined;
            this.catalogItem = _data["catalogItem"] ? ICatalogRef.fromJS(_data["catalogItem"]) : <any>undefined;
            this.details = _data["details"] ? ICatalogItemDetails.fromJS(_data["details"]) : <any>undefined;
            this.condition = _data["condition"];
            this.price = _data["price"] ? Money.fromJS(_data["price"]) : <any>undefined;
            this.purchasedAt = _data["purchasedAt"] ? IShopInfo.fromJS(_data["purchasedAt"]) : <any>undefined;
            this.addedDate = _data["addedDate"] ? new Date(_data["addedDate"].toString()) : <any>undefined;
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): ICollectionItem {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ICollectionItem' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemId"] = this.itemId ? this.itemId.toJSON() : <any>undefined;
        data["catalogItem"] = this.catalogItem ? this.catalogItem.toJSON() : <any>undefined;
        data["details"] = this.details ? this.details.toJSON() : <any>undefined;
        data["condition"] = this.condition;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["purchasedAt"] = this.purchasedAt ? this.purchasedAt.toJSON() : <any>undefined;
        data["addedDate"] = this.addedDate ? formatDate(this.addedDate) : <any>undefined;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface IICollectionItem {
    itemId?: CollectionItemId;
    catalogItem?: ICatalogRef;
    details?: ICatalogItemDetails | undefined;
    condition?: Condition;
    price?: Money;
    purchasedAt?: IShopInfo | undefined;
    addedDate?: Date;
    notes?: string | undefined;
}

export enum Condition {
    New = 0,
    PreOwned = 1,
}

export abstract class IShopInfo implements IIShopInfo {
    shopId?: ShopId;
    slug?: Slug;
    name?: string;

    constructor(data?: IIShopInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shopId = _data["shopId"] ? ShopId.fromJS(_data["shopId"]) : <any>undefined;
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): IShopInfo {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IShopInfo' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shopId"] = this.shopId ? this.shopId.toJSON() : <any>undefined;
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        data["name"] = this.name;
        return data; 
    }
}

export interface IIShopInfo {
    shopId?: ShopId;
    slug?: Slug;
    name?: string;
}

export class EditCollectionItemOutput implements IEditCollectionItemOutput {
    collectionId?: CollectionId;
    itemId?: CollectionItemId;
    catalogItem?: Slug;

    constructor(data?: IEditCollectionItemOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.collectionId = _data["collectionId"] ? CollectionId.fromJS(_data["collectionId"]) : <any>undefined;
            this.itemId = _data["itemId"] ? CollectionItemId.fromJS(_data["itemId"]) : <any>undefined;
            this.catalogItem = _data["catalogItem"] ? Slug.fromJS(_data["catalogItem"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditCollectionItemOutput {
        data = typeof data === 'object' ? data : {};
        let result = new EditCollectionItemOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collectionId"] = this.collectionId ? this.collectionId.toJSON() : <any>undefined;
        data["itemId"] = this.itemId ? this.itemId.toJSON() : <any>undefined;
        data["catalogItem"] = this.catalogItem ? this.catalogItem.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditCollectionItemOutput {
    collectionId?: CollectionId;
    itemId?: CollectionItemId;
    catalogItem?: Slug;
}

export class EditCollectionItemRequest implements IEditCollectionItemRequest {
    shop?: string | undefined;
    price?: number | undefined;
    condition?: string | undefined;
    addedDate?: Date | undefined;
    notes?: string | undefined;

    constructor(data?: IEditCollectionItemRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shop = _data["shop"];
            this.price = _data["price"];
            this.condition = _data["condition"];
            this.addedDate = _data["addedDate"] ? new Date(_data["addedDate"].toString()) : <any>undefined;
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): EditCollectionItemRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditCollectionItemRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shop"] = this.shop;
        data["price"] = this.price;
        data["condition"] = this.condition;
        data["addedDate"] = this.addedDate ? this.addedDate.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface IEditCollectionItemRequest {
    shop?: string | undefined;
    price?: number | undefined;
    condition?: string | undefined;
    addedDate?: Date | undefined;
    notes?: string | undefined;
}

export class CreateCollectionOutput implements ICreateCollectionOutput {
    id?: string;
    owner?: string;

    constructor(data?: ICreateCollectionOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.owner = _data["owner"];
        }
    }

    static fromJS(data: any): CreateCollectionOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCollectionOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["owner"] = this.owner;
        return data; 
    }
}

export interface ICreateCollectionOutput {
    id?: string;
    owner?: string;
}

export class CreateCollectionRequest implements ICreateCollectionRequest {
    notes?: string | undefined;

    constructor(data?: ICreateCollectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): CreateCollectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCollectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notes"] = this.notes;
        return data; 
    }
}

export interface ICreateCollectionRequest {
    notes?: string | undefined;
}

export class AddItemToCollectionOutput implements IAddItemToCollectionOutput {
    collectionId?: CollectionId;
    itemId?: CollectionItemId;
    catalogItem?: Slug;

    constructor(data?: IAddItemToCollectionOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.collectionId = _data["collectionId"] ? CollectionId.fromJS(_data["collectionId"]) : <any>undefined;
            this.itemId = _data["itemId"] ? CollectionItemId.fromJS(_data["itemId"]) : <any>undefined;
            this.catalogItem = _data["catalogItem"] ? Slug.fromJS(_data["catalogItem"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddItemToCollectionOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AddItemToCollectionOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collectionId"] = this.collectionId ? this.collectionId.toJSON() : <any>undefined;
        data["itemId"] = this.itemId ? this.itemId.toJSON() : <any>undefined;
        data["catalogItem"] = this.catalogItem ? this.catalogItem.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAddItemToCollectionOutput {
    collectionId?: CollectionId;
    itemId?: CollectionItemId;
    catalogItem?: Slug;
}

export class AddItemToCollectionRequest implements IAddItemToCollectionRequest {
    catalogItem?: string | undefined;
    shop?: string | undefined;
    price?: number;
    condition?: string | undefined;
    addedDate?: Date;
    notes?: string | undefined;

    constructor(data?: IAddItemToCollectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.catalogItem = _data["catalogItem"];
            this.shop = _data["shop"];
            this.price = _data["price"];
            this.condition = _data["condition"];
            this.addedDate = _data["addedDate"] ? new Date(_data["addedDate"].toString()) : <any>undefined;
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): AddItemToCollectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddItemToCollectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["catalogItem"] = this.catalogItem;
        data["shop"] = this.shop;
        data["price"] = this.price;
        data["condition"] = this.condition;
        data["addedDate"] = this.addedDate ? this.addedDate.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface IAddItemToCollectionRequest {
    catalogItem?: string | undefined;
    shop?: string | undefined;
    price?: number;
    condition?: string | undefined;
    addedDate?: Date;
    notes?: string | undefined;
}

export class PaginatedViewModelOfScaleView implements IPaginatedViewModelOfScaleView {
    links?: PaginateLinksView;
    limit?: number;
    results?: ScaleView[];

    constructor(data?: IPaginatedViewModelOfScaleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.links = _data["links"] ? PaginateLinksView.fromJS(_data["links"]) : <any>undefined;
            this.limit = _data["limit"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(ScaleView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedViewModelOfScaleView {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedViewModelOfScaleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["links"] = this.links ? this.links.toJSON() : <any>undefined;
        data["limit"] = this.limit;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPaginatedViewModelOfScaleView {
    links?: PaginateLinksView;
    limit?: number;
    results?: ScaleView[];
}

export class PaginateLinksView implements IPaginateLinksView {
    self?: string;
    prev?: string | undefined;
    next?: string | undefined;

    constructor(data?: IPaginateLinksView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.self = _data["self"];
            this.prev = _data["prev"];
            this.next = _data["next"];
        }
    }

    static fromJS(data: any): PaginateLinksView {
        data = typeof data === 'object' ? data : {};
        let result = new PaginateLinksView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["self"] = this.self;
        data["prev"] = this.prev;
        data["next"] = this.next;
        return data; 
    }
}

export interface IPaginateLinksView {
    self?: string;
    prev?: string | undefined;
    next?: string | undefined;
}

export class ScaleView implements IScaleView {
    links?: LinksView | undefined;
    id?: string;
    name?: string;
    ratio?: number | undefined;
    gauge?: ScaleGaugeView;
    description?: string | undefined;
    weight?: number | undefined;
    standards?: string[];

    constructor(data?: IScaleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.links = _data["links"] ? LinksView.fromJS(_data["links"]) : <any>undefined;
            this.id = _data["id"];
            this.name = _data["name"];
            this.ratio = _data["ratio"];
            this.gauge = _data["gauge"] ? ScaleGaugeView.fromJS(_data["gauge"]) : <any>undefined;
            this.description = _data["description"];
            this.weight = _data["weight"];
            if (Array.isArray(_data["standards"])) {
                this.standards = [] as any;
                for (let item of _data["standards"])
                    this.standards!.push(item);
            }
        }
    }

    static fromJS(data: any): ScaleView {
        data = typeof data === 'object' ? data : {};
        let result = new ScaleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["links"] = this.links ? this.links.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["name"] = this.name;
        data["ratio"] = this.ratio;
        data["gauge"] = this.gauge ? this.gauge.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["weight"] = this.weight;
        if (Array.isArray(this.standards)) {
            data["standards"] = [];
            for (let item of this.standards)
                data["standards"].push(item);
        }
        return data; 
    }
}

export interface IScaleView {
    links?: LinksView | undefined;
    id?: string;
    name?: string;
    ratio?: number | undefined;
    gauge?: ScaleGaugeView;
    description?: string | undefined;
    weight?: number | undefined;
    standards?: string[];
}

export class LinksView implements ILinksView {
    self?: string;
    slug?: string;

    constructor(data?: ILinksView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.self = _data["self"];
            this.slug = _data["slug"];
        }
    }

    static fromJS(data: any): LinksView {
        data = typeof data === 'object' ? data : {};
        let result = new LinksView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["self"] = this.self;
        data["slug"] = this.slug;
        return data; 
    }
}

export interface ILinksView {
    self?: string;
    slug?: string;
}

export class ScaleGaugeView implements IScaleGaugeView {
    millimeters?: number | undefined;
    inches?: number | undefined;
    trackGauge?: string | undefined;

    constructor(data?: IScaleGaugeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.millimeters = _data["millimeters"];
            this.inches = _data["inches"];
            this.trackGauge = _data["trackGauge"];
        }
    }

    static fromJS(data: any): ScaleGaugeView {
        data = typeof data === 'object' ? data : {};
        let result = new ScaleGaugeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["millimeters"] = this.millimeters;
        data["inches"] = this.inches;
        data["trackGauge"] = this.trackGauge;
        return data; 
    }
}

export interface IScaleGaugeView {
    millimeters?: number | undefined;
    inches?: number | undefined;
    trackGauge?: string | undefined;
}

export class EditScaleOutput implements IEditScaleOutput {

    constructor(data?: IEditScaleOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditScaleOutput {
        data = typeof data === 'object' ? data : {};
        let result = new EditScaleOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditScaleOutput {
}

export class EditScaleRequest implements IEditScaleRequest {
    name?: string | undefined;
    ratio?: number | undefined;
    gauge?: ScaleGaugeRequest | undefined;
    description?: string | undefined;
    standards?: string[];
    weight?: number | undefined;

    constructor(data?: IEditScaleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.ratio = _data["ratio"];
            this.gauge = _data["gauge"] ? ScaleGaugeRequest.fromJS(_data["gauge"]) : <any>undefined;
            this.description = _data["description"];
            if (Array.isArray(_data["standards"])) {
                this.standards = [] as any;
                for (let item of _data["standards"])
                    this.standards!.push(item);
            }
            this.weight = _data["weight"];
        }
    }

    static fromJS(data: any): EditScaleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditScaleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["ratio"] = this.ratio;
        data["gauge"] = this.gauge ? this.gauge.toJSON() : <any>undefined;
        data["description"] = this.description;
        if (Array.isArray(this.standards)) {
            data["standards"] = [];
            for (let item of this.standards)
                data["standards"].push(item);
        }
        data["weight"] = this.weight;
        return data; 
    }
}

export interface IEditScaleRequest {
    name?: string | undefined;
    ratio?: number | undefined;
    gauge?: ScaleGaugeRequest | undefined;
    description?: string | undefined;
    standards?: string[];
    weight?: number | undefined;
}

export class ScaleGaugeRequest implements IScaleGaugeRequest {
    trackGauge?: string | undefined;
    inches?: number | undefined;
    millimeters?: number | undefined;

    constructor(data?: IScaleGaugeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.trackGauge = _data["trackGauge"];
            this.inches = _data["inches"];
            this.millimeters = _data["millimeters"];
        }
    }

    static fromJS(data: any): ScaleGaugeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ScaleGaugeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["trackGauge"] = this.trackGauge;
        data["inches"] = this.inches;
        data["millimeters"] = this.millimeters;
        return data; 
    }
}

export interface IScaleGaugeRequest {
    trackGauge?: string | undefined;
    inches?: number | undefined;
    millimeters?: number | undefined;
}

export class CreateScaleOutput implements ICreateScaleOutput {
    slug?: Slug;

    constructor(data?: ICreateScaleOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateScaleOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateScaleOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateScaleOutput {
    slug?: Slug;
}

export class CreateScaleRequest implements ICreateScaleRequest {
    name?: string | undefined;
    ratio?: number | undefined;
    gauge?: ScaleGaugeRequest | undefined;
    description?: string | undefined;
    weight?: number | undefined;
    standards?: string[];

    constructor(data?: ICreateScaleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.ratio = _data["ratio"];
            this.gauge = _data["gauge"] ? ScaleGaugeRequest.fromJS(_data["gauge"]) : <any>undefined;
            this.description = _data["description"];
            this.weight = _data["weight"];
            if (Array.isArray(_data["standards"])) {
                this.standards = [] as any;
                for (let item of _data["standards"])
                    this.standards!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateScaleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateScaleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["ratio"] = this.ratio;
        data["gauge"] = this.gauge ? this.gauge.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["weight"] = this.weight;
        if (Array.isArray(this.standards)) {
            data["standards"] = [];
            for (let item of this.standards)
                data["standards"].push(item);
        }
        return data; 
    }
}

export interface ICreateScaleRequest {
    name?: string | undefined;
    ratio?: number | undefined;
    gauge?: ScaleGaugeRequest | undefined;
    description?: string | undefined;
    weight?: number | undefined;
    standards?: string[];
}

export class PaginatedViewModelOfRailwayView implements IPaginatedViewModelOfRailwayView {
    links?: PaginateLinksView;
    limit?: number;
    results?: RailwayView[];

    constructor(data?: IPaginatedViewModelOfRailwayView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.links = _data["links"] ? PaginateLinksView.fromJS(_data["links"]) : <any>undefined;
            this.limit = _data["limit"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(RailwayView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedViewModelOfRailwayView {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedViewModelOfRailwayView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["links"] = this.links ? this.links.toJSON() : <any>undefined;
        data["limit"] = this.limit;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPaginatedViewModelOfRailwayView {
    links?: PaginateLinksView;
    limit?: number;
    results?: RailwayView[];
}

export class RailwayView implements IRailwayView {
    links?: LinksView | undefined;
    id?: string;
    name?: string;
    companyName?: string | undefined;
    country?: string | undefined;
    periodOfActivity?: PeriodOfActivityView | undefined;
    totalLength?: TotalLengthView | undefined;
    trackGauge?: RailwayGaugeView | undefined;
    headquarters?: string | undefined;
    websiteUrl?: string | undefined;

    constructor(data?: IRailwayView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.links = _data["links"] ? LinksView.fromJS(_data["links"]) : <any>undefined;
            this.id = _data["id"];
            this.name = _data["name"];
            this.companyName = _data["companyName"];
            this.country = _data["country"];
            this.periodOfActivity = _data["periodOfActivity"] ? PeriodOfActivityView.fromJS(_data["periodOfActivity"]) : <any>undefined;
            this.totalLength = _data["totalLength"] ? TotalLengthView.fromJS(_data["totalLength"]) : <any>undefined;
            this.trackGauge = _data["trackGauge"] ? RailwayGaugeView.fromJS(_data["trackGauge"]) : <any>undefined;
            this.headquarters = _data["headquarters"];
            this.websiteUrl = _data["websiteUrl"];
        }
    }

    static fromJS(data: any): RailwayView {
        data = typeof data === 'object' ? data : {};
        let result = new RailwayView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["links"] = this.links ? this.links.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["name"] = this.name;
        data["companyName"] = this.companyName;
        data["country"] = this.country;
        data["periodOfActivity"] = this.periodOfActivity ? this.periodOfActivity.toJSON() : <any>undefined;
        data["totalLength"] = this.totalLength ? this.totalLength.toJSON() : <any>undefined;
        data["trackGauge"] = this.trackGauge ? this.trackGauge.toJSON() : <any>undefined;
        data["headquarters"] = this.headquarters;
        data["websiteUrl"] = this.websiteUrl;
        return data; 
    }
}

export interface IRailwayView {
    links?: LinksView | undefined;
    id?: string;
    name?: string;
    companyName?: string | undefined;
    country?: string | undefined;
    periodOfActivity?: PeriodOfActivityView | undefined;
    totalLength?: TotalLengthView | undefined;
    trackGauge?: RailwayGaugeView | undefined;
    headquarters?: string | undefined;
    websiteUrl?: string | undefined;
}

export class PeriodOfActivityView implements IPeriodOfActivityView {
    status?: string | undefined;
    operatingSince?: Date | undefined;
    operatingUntil?: Date | undefined;

    constructor(data?: IPeriodOfActivityView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.operatingSince = _data["operatingSince"] ? new Date(_data["operatingSince"].toString()) : <any>undefined;
            this.operatingUntil = _data["operatingUntil"] ? new Date(_data["operatingUntil"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PeriodOfActivityView {
        data = typeof data === 'object' ? data : {};
        let result = new PeriodOfActivityView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["operatingSince"] = this.operatingSince ? this.operatingSince.toISOString() : <any>undefined;
        data["operatingUntil"] = this.operatingUntil ? this.operatingUntil.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPeriodOfActivityView {
    status?: string | undefined;
    operatingSince?: Date | undefined;
    operatingUntil?: Date | undefined;
}

export class TotalLengthView implements ITotalLengthView {
    miles?: number | undefined;
    kilometers?: number | undefined;

    constructor(data?: ITotalLengthView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.miles = _data["miles"];
            this.kilometers = _data["kilometers"];
        }
    }

    static fromJS(data: any): TotalLengthView {
        data = typeof data === 'object' ? data : {};
        let result = new TotalLengthView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["miles"] = this.miles;
        data["kilometers"] = this.kilometers;
        return data; 
    }
}

export interface ITotalLengthView {
    miles?: number | undefined;
    kilometers?: number | undefined;
}

export class RailwayGaugeView implements IRailwayGaugeView {
    millimeters?: number | undefined;
    inches?: number | undefined;
    gauge?: string | undefined;

    constructor(data?: IRailwayGaugeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.millimeters = _data["millimeters"];
            this.inches = _data["inches"];
            this.gauge = _data["gauge"];
        }
    }

    static fromJS(data: any): RailwayGaugeView {
        data = typeof data === 'object' ? data : {};
        let result = new RailwayGaugeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["millimeters"] = this.millimeters;
        data["inches"] = this.inches;
        data["gauge"] = this.gauge;
        return data; 
    }
}

export interface IRailwayGaugeView {
    millimeters?: number | undefined;
    inches?: number | undefined;
    gauge?: string | undefined;
}

export class EditRailwayOutput implements IEditRailwayOutput {

    constructor(data?: IEditRailwayOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditRailwayOutput {
        data = typeof data === 'object' ? data : {};
        let result = new EditRailwayOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditRailwayOutput {
}

export class EditRailwayRequest implements IEditRailwayRequest {
    name?: string | undefined;
    companyName?: string | undefined;
    country?: string | undefined;
    periodOfActivity?: PeriodOfActivityRequest | undefined;
    totalLength?: TotalRailwayLengthRequest | undefined;
    gauge?: RailwayGaugeRequest | undefined;
    websiteUrl?: string | undefined;
    headquarters?: string | undefined;

    constructor(data?: IEditRailwayRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.companyName = _data["companyName"];
            this.country = _data["country"];
            this.periodOfActivity = _data["periodOfActivity"] ? PeriodOfActivityRequest.fromJS(_data["periodOfActivity"]) : <any>undefined;
            this.totalLength = _data["totalLength"] ? TotalRailwayLengthRequest.fromJS(_data["totalLength"]) : <any>undefined;
            this.gauge = _data["gauge"] ? RailwayGaugeRequest.fromJS(_data["gauge"]) : <any>undefined;
            this.websiteUrl = _data["websiteUrl"];
            this.headquarters = _data["headquarters"];
        }
    }

    static fromJS(data: any): EditRailwayRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditRailwayRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["companyName"] = this.companyName;
        data["country"] = this.country;
        data["periodOfActivity"] = this.periodOfActivity ? this.periodOfActivity.toJSON() : <any>undefined;
        data["totalLength"] = this.totalLength ? this.totalLength.toJSON() : <any>undefined;
        data["gauge"] = this.gauge ? this.gauge.toJSON() : <any>undefined;
        data["websiteUrl"] = this.websiteUrl;
        data["headquarters"] = this.headquarters;
        return data; 
    }
}

export interface IEditRailwayRequest {
    name?: string | undefined;
    companyName?: string | undefined;
    country?: string | undefined;
    periodOfActivity?: PeriodOfActivityRequest | undefined;
    totalLength?: TotalRailwayLengthRequest | undefined;
    gauge?: RailwayGaugeRequest | undefined;
    websiteUrl?: string | undefined;
    headquarters?: string | undefined;
}

export class PeriodOfActivityRequest implements IPeriodOfActivityRequest {
    status?: string | undefined;
    operatingUntil?: Date | undefined;
    operatingSince?: Date | undefined;

    constructor(data?: IPeriodOfActivityRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.operatingUntil = _data["operatingUntil"] ? new Date(_data["operatingUntil"].toString()) : <any>undefined;
            this.operatingSince = _data["operatingSince"] ? new Date(_data["operatingSince"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PeriodOfActivityRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PeriodOfActivityRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["operatingUntil"] = this.operatingUntil ? this.operatingUntil.toISOString() : <any>undefined;
        data["operatingSince"] = this.operatingSince ? this.operatingSince.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPeriodOfActivityRequest {
    status?: string | undefined;
    operatingUntil?: Date | undefined;
    operatingSince?: Date | undefined;
}

export class TotalRailwayLengthRequest implements ITotalRailwayLengthRequest {
    kilometers?: number | undefined;
    miles?: number | undefined;

    constructor(data?: ITotalRailwayLengthRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kilometers = _data["kilometers"];
            this.miles = _data["miles"];
        }
    }

    static fromJS(data: any): TotalRailwayLengthRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TotalRailwayLengthRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kilometers"] = this.kilometers;
        data["miles"] = this.miles;
        return data; 
    }
}

export interface ITotalRailwayLengthRequest {
    kilometers?: number | undefined;
    miles?: number | undefined;
}

export class RailwayGaugeRequest implements IRailwayGaugeRequest {
    trackGauge?: string | undefined;
    millimeters?: number | undefined;
    inches?: number | undefined;

    constructor(data?: IRailwayGaugeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.trackGauge = _data["trackGauge"];
            this.millimeters = _data["millimeters"];
            this.inches = _data["inches"];
        }
    }

    static fromJS(data: any): RailwayGaugeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RailwayGaugeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["trackGauge"] = this.trackGauge;
        data["millimeters"] = this.millimeters;
        data["inches"] = this.inches;
        return data; 
    }
}

export interface IRailwayGaugeRequest {
    trackGauge?: string | undefined;
    millimeters?: number | undefined;
    inches?: number | undefined;
}

export class CreateRailwayOutput implements ICreateRailwayOutput {
    slug?: Slug;

    constructor(data?: ICreateRailwayOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateRailwayOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRailwayOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateRailwayOutput {
    slug?: Slug;
}

export class CreateRailwayRequest implements ICreateRailwayRequest {
    name?: string;
    companyName?: string | undefined;
    country?: string | undefined;
    periodOfActivity?: PeriodOfActivityRequest | undefined;
    totalLength?: TotalRailwayLengthRequest | undefined;
    gauge?: RailwayGaugeRequest | undefined;
    websiteUrl?: string | undefined;
    headquarters?: string | undefined;

    constructor(data?: ICreateRailwayRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.companyName = _data["companyName"];
            this.country = _data["country"];
            this.periodOfActivity = _data["periodOfActivity"] ? PeriodOfActivityRequest.fromJS(_data["periodOfActivity"]) : <any>undefined;
            this.totalLength = _data["totalLength"] ? TotalRailwayLengthRequest.fromJS(_data["totalLength"]) : <any>undefined;
            this.gauge = _data["gauge"] ? RailwayGaugeRequest.fromJS(_data["gauge"]) : <any>undefined;
            this.websiteUrl = _data["websiteUrl"];
            this.headquarters = _data["headquarters"];
        }
    }

    static fromJS(data: any): CreateRailwayRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRailwayRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["companyName"] = this.companyName;
        data["country"] = this.country;
        data["periodOfActivity"] = this.periodOfActivity ? this.periodOfActivity.toJSON() : <any>undefined;
        data["totalLength"] = this.totalLength ? this.totalLength.toJSON() : <any>undefined;
        data["gauge"] = this.gauge ? this.gauge.toJSON() : <any>undefined;
        data["websiteUrl"] = this.websiteUrl;
        data["headquarters"] = this.headquarters;
        return data; 
    }
}

export interface ICreateRailwayRequest {
    name?: string;
    companyName?: string | undefined;
    country?: string | undefined;
    periodOfActivity?: PeriodOfActivityRequest | undefined;
    totalLength?: TotalRailwayLengthRequest | undefined;
    gauge?: RailwayGaugeRequest | undefined;
    websiteUrl?: string | undefined;
    headquarters?: string | undefined;
}

export class CatalogItemView implements ICatalogItemView {
    links?: LinksView | undefined;
    id?: string;
    itemNumber?: string;
    brand?: BrandInfoView;
    description?: string;
    prototypeDescription?: string | undefined;
    modelDescription?: string | undefined;
    deliveryDate?: string | undefined;
    available?: boolean;
    scale?: ScaleInfoView;
    powerMethod?: string;
    rollingStocks?: RollingStockView[];

    constructor(data?: ICatalogItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.links = _data["links"] ? LinksView.fromJS(_data["links"]) : <any>undefined;
            this.id = _data["id"];
            this.itemNumber = _data["itemNumber"];
            this.brand = _data["brand"] ? BrandInfoView.fromJS(_data["brand"]) : <any>undefined;
            this.description = _data["description"];
            this.prototypeDescription = _data["prototypeDescription"];
            this.modelDescription = _data["modelDescription"];
            this.deliveryDate = _data["deliveryDate"];
            this.available = _data["available"];
            this.scale = _data["scale"] ? ScaleInfoView.fromJS(_data["scale"]) : <any>undefined;
            this.powerMethod = _data["powerMethod"];
            if (Array.isArray(_data["rollingStocks"])) {
                this.rollingStocks = [] as any;
                for (let item of _data["rollingStocks"])
                    this.rollingStocks!.push(RollingStockView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CatalogItemView {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["links"] = this.links ? this.links.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["itemNumber"] = this.itemNumber;
        data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["prototypeDescription"] = this.prototypeDescription;
        data["modelDescription"] = this.modelDescription;
        data["deliveryDate"] = this.deliveryDate;
        data["available"] = this.available;
        data["scale"] = this.scale ? this.scale.toJSON() : <any>undefined;
        data["powerMethod"] = this.powerMethod;
        if (Array.isArray(this.rollingStocks)) {
            data["rollingStocks"] = [];
            for (let item of this.rollingStocks)
                data["rollingStocks"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICatalogItemView {
    links?: LinksView | undefined;
    id?: string;
    itemNumber?: string;
    brand?: BrandInfoView;
    description?: string;
    prototypeDescription?: string | undefined;
    modelDescription?: string | undefined;
    deliveryDate?: string | undefined;
    available?: boolean;
    scale?: ScaleInfoView;
    powerMethod?: string;
    rollingStocks?: RollingStockView[];
}

export class BrandInfoView implements IBrandInfoView {
    id?: string;
    name?: string;
    slug?: string;

    constructor(data?: IBrandInfoView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.slug = _data["slug"];
        }
    }

    static fromJS(data: any): BrandInfoView {
        data = typeof data === 'object' ? data : {};
        let result = new BrandInfoView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["slug"] = this.slug;
        return data; 
    }
}

export interface IBrandInfoView {
    id?: string;
    name?: string;
    slug?: string;
}

export class ScaleInfoView implements IScaleInfoView {
    id?: string;
    name?: string;
    slug?: string;

    constructor(data?: IScaleInfoView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.slug = _data["slug"];
        }
    }

    static fromJS(data: any): ScaleInfoView {
        data = typeof data === 'object' ? data : {};
        let result = new ScaleInfoView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["slug"] = this.slug;
        return data; 
    }
}

export interface IScaleInfoView {
    id?: string;
    name?: string;
    slug?: string;
}

export class RollingStockView implements IRollingStockView {
    id?: string;
    railway?: RailwayInfoView;
    category?: string;
    era?: string;
    lengthOverBuffer?: LengthOverBufferView | undefined;
    className?: string | undefined;
    roadNumber?: string | undefined;
    typeName?: string | undefined;
    dccInterface?: string | undefined;
    control?: string | undefined;

    constructor(data?: IRollingStockView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.railway = _data["railway"] ? RailwayInfoView.fromJS(_data["railway"]) : <any>undefined;
            this.category = _data["category"];
            this.era = _data["era"];
            this.lengthOverBuffer = _data["lengthOverBuffer"] ? LengthOverBufferView.fromJS(_data["lengthOverBuffer"]) : <any>undefined;
            this.className = _data["className"];
            this.roadNumber = _data["roadNumber"];
            this.typeName = _data["typeName"];
            this.dccInterface = _data["dccInterface"];
            this.control = _data["control"];
        }
    }

    static fromJS(data: any): RollingStockView {
        data = typeof data === 'object' ? data : {};
        let result = new RollingStockView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["railway"] = this.railway ? this.railway.toJSON() : <any>undefined;
        data["category"] = this.category;
        data["era"] = this.era;
        data["lengthOverBuffer"] = this.lengthOverBuffer ? this.lengthOverBuffer.toJSON() : <any>undefined;
        data["className"] = this.className;
        data["roadNumber"] = this.roadNumber;
        data["typeName"] = this.typeName;
        data["dccInterface"] = this.dccInterface;
        data["control"] = this.control;
        return data; 
    }
}

export interface IRollingStockView {
    id?: string;
    railway?: RailwayInfoView;
    category?: string;
    era?: string;
    lengthOverBuffer?: LengthOverBufferView | undefined;
    className?: string | undefined;
    roadNumber?: string | undefined;
    typeName?: string | undefined;
    dccInterface?: string | undefined;
    control?: string | undefined;
}

export class RailwayInfoView implements IRailwayInfoView {
    id?: string;
    name?: string;
    slug?: string;

    constructor(data?: IRailwayInfoView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.slug = _data["slug"];
        }
    }

    static fromJS(data: any): RailwayInfoView {
        data = typeof data === 'object' ? data : {};
        let result = new RailwayInfoView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["slug"] = this.slug;
        return data; 
    }
}

export interface IRailwayInfoView {
    id?: string;
    name?: string;
    slug?: string;
}

export class LengthOverBufferView implements ILengthOverBufferView {
    millimeters?: number | undefined;
    inches?: number | undefined;

    constructor(data?: ILengthOverBufferView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.millimeters = _data["millimeters"];
            this.inches = _data["inches"];
        }
    }

    static fromJS(data: any): LengthOverBufferView {
        data = typeof data === 'object' ? data : {};
        let result = new LengthOverBufferView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["millimeters"] = this.millimeters;
        data["inches"] = this.inches;
        return data; 
    }
}

export interface ILengthOverBufferView {
    millimeters?: number | undefined;
    inches?: number | undefined;
}

export class EditRollingStockRequest implements IEditRollingStockRequest {
    epoch?: string | undefined;
    category?: string | undefined;
    railway?: string | undefined;
    className?: string | undefined;
    typeName?: string | undefined;
    roadNumber?: string | undefined;
    passengerCarType?: string | undefined;
    serviceLevel?: string | undefined;
    lengthOverBuffer?: LengthOverBufferRequest | undefined;
    dccInterface?: string | undefined;
    control?: string | undefined;

    constructor(data?: IEditRollingStockRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.epoch = _data["epoch"];
            this.category = _data["category"];
            this.railway = _data["railway"];
            this.className = _data["className"];
            this.typeName = _data["typeName"];
            this.roadNumber = _data["roadNumber"];
            this.passengerCarType = _data["passengerCarType"];
            this.serviceLevel = _data["serviceLevel"];
            this.lengthOverBuffer = _data["lengthOverBuffer"] ? LengthOverBufferRequest.fromJS(_data["lengthOverBuffer"]) : <any>undefined;
            this.dccInterface = _data["dccInterface"];
            this.control = _data["control"];
        }
    }

    static fromJS(data: any): EditRollingStockRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditRollingStockRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["epoch"] = this.epoch;
        data["category"] = this.category;
        data["railway"] = this.railway;
        data["className"] = this.className;
        data["typeName"] = this.typeName;
        data["roadNumber"] = this.roadNumber;
        data["passengerCarType"] = this.passengerCarType;
        data["serviceLevel"] = this.serviceLevel;
        data["lengthOverBuffer"] = this.lengthOverBuffer ? this.lengthOverBuffer.toJSON() : <any>undefined;
        data["dccInterface"] = this.dccInterface;
        data["control"] = this.control;
        return data; 
    }
}

export interface IEditRollingStockRequest {
    epoch?: string | undefined;
    category?: string | undefined;
    railway?: string | undefined;
    className?: string | undefined;
    typeName?: string | undefined;
    roadNumber?: string | undefined;
    passengerCarType?: string | undefined;
    serviceLevel?: string | undefined;
    lengthOverBuffer?: LengthOverBufferRequest | undefined;
    dccInterface?: string | undefined;
    control?: string | undefined;
}

export class LengthOverBufferRequest implements ILengthOverBufferRequest {
    millimeters?: number | undefined;
    inches?: number | undefined;

    constructor(data?: ILengthOverBufferRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.millimeters = _data["millimeters"];
            this.inches = _data["inches"];
        }
    }

    static fromJS(data: any): LengthOverBufferRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LengthOverBufferRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["millimeters"] = this.millimeters;
        data["inches"] = this.inches;
        return data; 
    }
}

export interface ILengthOverBufferRequest {
    millimeters?: number | undefined;
    inches?: number | undefined;
}

export class EditCatalogItemOutput implements IEditCatalogItemOutput {

    constructor(data?: IEditCatalogItemOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditCatalogItemOutput {
        data = typeof data === 'object' ? data : {};
        let result = new EditCatalogItemOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditCatalogItemOutput {
}

export class EditCatalogItemRequest implements IEditCatalogItemRequest {
    brand?: string | undefined;
    itemNumber?: string | undefined;
    description?: string | undefined;
    prototypeDescription?: string | undefined;
    modelDescription?: string | undefined;
    powerMethod?: string | undefined;
    scale?: string | undefined;
    deliveryDate?: string | undefined;
    available?: boolean;
    rollingStocks?: RollingStockRequest[];

    constructor(data?: IEditCatalogItemRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brand = _data["brand"];
            this.itemNumber = _data["itemNumber"];
            this.description = _data["description"];
            this.prototypeDescription = _data["prototypeDescription"];
            this.modelDescription = _data["modelDescription"];
            this.powerMethod = _data["powerMethod"];
            this.scale = _data["scale"];
            this.deliveryDate = _data["deliveryDate"];
            this.available = _data["available"];
            if (Array.isArray(_data["rollingStocks"])) {
                this.rollingStocks = [] as any;
                for (let item of _data["rollingStocks"])
                    this.rollingStocks!.push(RollingStockRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EditCatalogItemRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditCatalogItemRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brand"] = this.brand;
        data["itemNumber"] = this.itemNumber;
        data["description"] = this.description;
        data["prototypeDescription"] = this.prototypeDescription;
        data["modelDescription"] = this.modelDescription;
        data["powerMethod"] = this.powerMethod;
        data["scale"] = this.scale;
        data["deliveryDate"] = this.deliveryDate;
        data["available"] = this.available;
        if (Array.isArray(this.rollingStocks)) {
            data["rollingStocks"] = [];
            for (let item of this.rollingStocks)
                data["rollingStocks"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEditCatalogItemRequest {
    brand?: string | undefined;
    itemNumber?: string | undefined;
    description?: string | undefined;
    prototypeDescription?: string | undefined;
    modelDescription?: string | undefined;
    powerMethod?: string | undefined;
    scale?: string | undefined;
    deliveryDate?: string | undefined;
    available?: boolean;
    rollingStocks?: RollingStockRequest[];
}

export class RollingStockRequest implements IRollingStockRequest {
    epoch?: string | undefined;
    lengthOverBuffer?: LengthOverBufferRequest | undefined;
    railway?: string | undefined;
    className?: string | undefined;
    roadNumber?: string | undefined;
    typeName?: string | undefined;
    dccInterface?: string | undefined;
    control?: string | undefined;
    category?: string | undefined;
    serviceLevel?: string | undefined;
    passengerCarType?: string | undefined;

    constructor(data?: IRollingStockRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.epoch = _data["epoch"];
            this.lengthOverBuffer = _data["lengthOverBuffer"] ? LengthOverBufferRequest.fromJS(_data["lengthOverBuffer"]) : <any>undefined;
            this.railway = _data["railway"];
            this.className = _data["className"];
            this.roadNumber = _data["roadNumber"];
            this.typeName = _data["typeName"];
            this.dccInterface = _data["dccInterface"];
            this.control = _data["control"];
            this.category = _data["category"];
            this.serviceLevel = _data["serviceLevel"];
            this.passengerCarType = _data["passengerCarType"];
        }
    }

    static fromJS(data: any): RollingStockRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RollingStockRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["epoch"] = this.epoch;
        data["lengthOverBuffer"] = this.lengthOverBuffer ? this.lengthOverBuffer.toJSON() : <any>undefined;
        data["railway"] = this.railway;
        data["className"] = this.className;
        data["roadNumber"] = this.roadNumber;
        data["typeName"] = this.typeName;
        data["dccInterface"] = this.dccInterface;
        data["control"] = this.control;
        data["category"] = this.category;
        data["serviceLevel"] = this.serviceLevel;
        data["passengerCarType"] = this.passengerCarType;
        return data; 
    }
}

export interface IRollingStockRequest {
    epoch?: string | undefined;
    lengthOverBuffer?: LengthOverBufferRequest | undefined;
    railway?: string | undefined;
    className?: string | undefined;
    roadNumber?: string | undefined;
    typeName?: string | undefined;
    dccInterface?: string | undefined;
    control?: string | undefined;
    category?: string | undefined;
    serviceLevel?: string | undefined;
    passengerCarType?: string | undefined;
}

export class CreateCatalogItemOutput implements ICreateCatalogItemOutput {
    id?: CatalogItemId;
    slug?: Slug;

    constructor(data?: ICreateCatalogItemOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? CatalogItemId.fromJS(_data["id"]) : <any>undefined;
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateCatalogItemOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCatalogItemOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateCatalogItemOutput {
    id?: CatalogItemId;
    slug?: Slug;
}

export class CreateCatalogItemRequest implements ICreateCatalogItemRequest {
    brand?: string | undefined;
    itemNumber?: string | undefined;
    description?: string | undefined;
    prototypeDescription?: string | undefined;
    modelDescription?: string | undefined;
    powerMethod?: string | undefined;
    scale?: string | undefined;
    deliveryDate?: string | undefined;
    available?: boolean;
    rollingStocks?: RollingStockRequest[];

    constructor(data?: ICreateCatalogItemRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brand = _data["brand"];
            this.itemNumber = _data["itemNumber"];
            this.description = _data["description"];
            this.prototypeDescription = _data["prototypeDescription"];
            this.modelDescription = _data["modelDescription"];
            this.powerMethod = _data["powerMethod"];
            this.scale = _data["scale"];
            this.deliveryDate = _data["deliveryDate"];
            this.available = _data["available"];
            if (Array.isArray(_data["rollingStocks"])) {
                this.rollingStocks = [] as any;
                for (let item of _data["rollingStocks"])
                    this.rollingStocks!.push(RollingStockRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateCatalogItemRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCatalogItemRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brand"] = this.brand;
        data["itemNumber"] = this.itemNumber;
        data["description"] = this.description;
        data["prototypeDescription"] = this.prototypeDescription;
        data["modelDescription"] = this.modelDescription;
        data["powerMethod"] = this.powerMethod;
        data["scale"] = this.scale;
        data["deliveryDate"] = this.deliveryDate;
        data["available"] = this.available;
        if (Array.isArray(this.rollingStocks)) {
            data["rollingStocks"] = [];
            for (let item of this.rollingStocks)
                data["rollingStocks"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateCatalogItemRequest {
    brand?: string | undefined;
    itemNumber?: string | undefined;
    description?: string | undefined;
    prototypeDescription?: string | undefined;
    modelDescription?: string | undefined;
    powerMethod?: string | undefined;
    scale?: string | undefined;
    deliveryDate?: string | undefined;
    available?: boolean;
    rollingStocks?: RollingStockRequest[];
}

export class PaginatedViewModelOfBrandView implements IPaginatedViewModelOfBrandView {
    links?: PaginateLinksView;
    limit?: number;
    results?: BrandView[];

    constructor(data?: IPaginatedViewModelOfBrandView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.links = _data["links"] ? PaginateLinksView.fromJS(_data["links"]) : <any>undefined;
            this.limit = _data["limit"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(BrandView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedViewModelOfBrandView {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedViewModelOfBrandView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["links"] = this.links ? this.links.toJSON() : <any>undefined;
        data["limit"] = this.limit;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPaginatedViewModelOfBrandView {
    links?: PaginateLinksView;
    limit?: number;
    results?: BrandView[];
}

export class BrandView implements IBrandView {
    links?: LinksView | undefined;
    id?: string;
    name?: string;
    companyName?: string | undefined;
    mailAddress?: string | undefined;
    websiteUrl?: string | undefined;
    kind?: string | undefined;
    address?: AddressView | undefined;

    constructor(data?: IBrandView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.links = _data["links"] ? LinksView.fromJS(_data["links"]) : <any>undefined;
            this.id = _data["id"];
            this.name = _data["name"];
            this.companyName = _data["companyName"];
            this.mailAddress = _data["mailAddress"];
            this.websiteUrl = _data["websiteUrl"];
            this.kind = _data["kind"];
            this.address = _data["address"] ? AddressView.fromJS(_data["address"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BrandView {
        data = typeof data === 'object' ? data : {};
        let result = new BrandView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["links"] = this.links ? this.links.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["name"] = this.name;
        data["companyName"] = this.companyName;
        data["mailAddress"] = this.mailAddress;
        data["websiteUrl"] = this.websiteUrl;
        data["kind"] = this.kind;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBrandView {
    links?: LinksView | undefined;
    id?: string;
    name?: string;
    companyName?: string | undefined;
    mailAddress?: string | undefined;
    websiteUrl?: string | undefined;
    kind?: string | undefined;
    address?: AddressView | undefined;
}

export class AddressView implements IAddressView {
    line1?: string;
    line2?: string | undefined;
    city?: string;
    region?: string | undefined;
    postalCode?: string;
    country?: string;

    constructor(data?: IAddressView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.line1 = _data["line1"];
            this.line2 = _data["line2"];
            this.city = _data["city"];
            this.region = _data["region"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): AddressView {
        data = typeof data === 'object' ? data : {};
        let result = new AddressView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["line1"] = this.line1;
        data["line2"] = this.line2;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddressView {
    line1?: string;
    line2?: string | undefined;
    city?: string;
    region?: string | undefined;
    postalCode?: string;
    country?: string;
}

export class EditBrandOutput implements IEditBrandOutput {
    slug?: Slug;

    constructor(data?: IEditBrandOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditBrandOutput {
        data = typeof data === 'object' ? data : {};
        let result = new EditBrandOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditBrandOutput {
    slug?: Slug;
}

export class EditBrandRequest implements IEditBrandRequest {
    name?: string | undefined;
    companyName?: string | undefined;
    groupName?: string | undefined;
    description?: string | undefined;
    websiteUrl?: string | undefined;
    emailAddress?: string | undefined;
    brandType?: string | undefined;
    address?: AddressRequest2 | undefined;

    constructor(data?: IEditBrandRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.companyName = _data["companyName"];
            this.groupName = _data["groupName"];
            this.description = _data["description"];
            this.websiteUrl = _data["websiteUrl"];
            this.emailAddress = _data["emailAddress"];
            this.brandType = _data["brandType"];
            this.address = _data["address"] ? AddressRequest2.fromJS(_data["address"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditBrandRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditBrandRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["companyName"] = this.companyName;
        data["groupName"] = this.groupName;
        data["description"] = this.description;
        data["websiteUrl"] = this.websiteUrl;
        data["emailAddress"] = this.emailAddress;
        data["brandType"] = this.brandType;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditBrandRequest {
    name?: string | undefined;
    companyName?: string | undefined;
    groupName?: string | undefined;
    description?: string | undefined;
    websiteUrl?: string | undefined;
    emailAddress?: string | undefined;
    brandType?: string | undefined;
    address?: AddressRequest2 | undefined;
}

export class AddressRequest2 implements IAddressRequest2 {
    line1?: string | undefined;
    line2?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;

    constructor(data?: IAddressRequest2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.line1 = _data["line1"];
            this.line2 = _data["line2"];
            this.city = _data["city"];
            this.region = _data["region"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): AddressRequest2 {
        data = typeof data === 'object' ? data : {};
        let result = new AddressRequest2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["line1"] = this.line1;
        data["line2"] = this.line2;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddressRequest2 {
    line1?: string | undefined;
    line2?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
}

export class CreateBrandOutput implements ICreateBrandOutput {
    slug?: Slug;

    constructor(data?: ICreateBrandOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.slug = _data["slug"] ? Slug.fromJS(_data["slug"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateBrandOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBrandOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["slug"] = this.slug ? this.slug.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateBrandOutput {
    slug?: Slug;
}

export class CreateBrandRequest implements ICreateBrandRequest {
    name?: string;
    companyName?: string | undefined;
    groupName?: string | undefined;
    description?: string | undefined;
    websiteUrl?: string | undefined;
    emailAddress?: string | undefined;
    brandType?: string | undefined;
    address?: AddressRequest2 | undefined;

    constructor(data?: ICreateBrandRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.companyName = _data["companyName"];
            this.groupName = _data["groupName"];
            this.description = _data["description"];
            this.websiteUrl = _data["websiteUrl"];
            this.emailAddress = _data["emailAddress"];
            this.brandType = _data["brandType"];
            this.address = _data["address"] ? AddressRequest2.fromJS(_data["address"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateBrandRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBrandRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["companyName"] = this.companyName;
        data["groupName"] = this.groupName;
        data["description"] = this.description;
        data["websiteUrl"] = this.websiteUrl;
        data["emailAddress"] = this.emailAddress;
        data["brandType"] = this.brandType;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateBrandRequest {
    name?: string;
    companyName?: string | undefined;
    groupName?: string | undefined;
    description?: string | undefined;
    websiteUrl?: string | undefined;
    emailAddress?: string | undefined;
    brandType?: string | undefined;
    address?: AddressRequest2 | undefined;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}